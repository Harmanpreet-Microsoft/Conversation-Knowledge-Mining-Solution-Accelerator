{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.37.4.10188",
      "templateHash": "7263803858241829495"
    }
  },
  "parameters": {
    "solutionName": {
      "type": "string",
      "defaultValue": "kmgen",
      "minLength": 3,
      "maxLength": 16,
      "metadata": {
        "description": "Required. A unique prefix for all resources in this deployment. This should be 3-20 characters long:"
      }
    },
    "existingLogAnalyticsWorkspaceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional: Existing Log Analytics Workspace Resource ID"
      }
    },
    "azureExistingAIProjectResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Use this parameter to use an existing AI project resource ID"
      }
    },
    "contentUnderstandingLocation": {
      "type": "string",
      "defaultValue": "swedencentral",
      "allowedValues": [
        "swedencentral",
        "australiaeast"
      ],
      "metadata": {
        "azd": {
          "type": "location"
        },
        "description": "Optional. Location for the Content Understanding service deployment:"
      },
      "minLength": 1
    },
    "secondaryLocation": {
      "type": "string",
      "defaultValue": "eastus2",
      "minLength": 1,
      "metadata": {
        "description": "Optional. Secondary location for databases creation(example:eastus2):"
      }
    },
    "deploymentType": {
      "type": "string",
      "defaultValue": "GlobalStandard",
      "allowedValues": [
        "Standard",
        "GlobalStandard"
      ],
      "minLength": 1,
      "metadata": {
        "description": "Optional. GPT model deployment type:"
      }
    },
    "gptModelName": {
      "type": "string",
      "defaultValue": "gpt-4o-mini",
      "metadata": {
        "description": "Optional. Name of the GPT model to deploy:"
      }
    },
    "gptModelVersion": {
      "type": "string",
      "defaultValue": "2024-07-18",
      "metadata": {
        "description": "Optional. Version of the GPT model to deploy:"
      }
    },
    "azureOpenAIApiVersion": {
      "type": "string",
      "defaultValue": "2025-01-01-preview",
      "metadata": {
        "description": "Optional. Version of the OpenAI."
      }
    },
    "azureAiAgentApiVersion": {
      "type": "string",
      "defaultValue": "2025-05-01",
      "metadata": {
        "description": "Optional. Version of AI Agent API."
      }
    },
    "gptDeploymentCapacity": {
      "type": "int",
      "defaultValue": 150,
      "minValue": 10,
      "metadata": {
        "description": "Optional. Capacity of the GPT deployment:"
      }
    },
    "embeddingModel": {
      "type": "string",
      "defaultValue": "text-embedding-ada-002",
      "allowedValues": [
        "text-embedding-ada-002"
      ],
      "minLength": 1,
      "metadata": {
        "description": "Optional. Name of the Text Embedding model to deploy:"
      }
    },
    "embeddingDeploymentCapacity": {
      "type": "int",
      "defaultValue": 80,
      "minValue": 10,
      "metadata": {
        "description": "Optional. Capacity of the Embedding Model deployment."
      }
    },
    "imageTag": {
      "type": "string",
      "defaultValue": "latest_fdp",
      "metadata": {
        "description": "Optional. Image Tag."
      }
    },
    "AZURE_LOCATION": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Azure Location."
      }
    },
    "aiDeploymentsLocation": {
      "type": "string",
      "metadata": {
        "azd": {
          "type": "location",
          "usageName": [
            "OpenAI.GlobalStandard.gpt-4o-mini,150",
            "OpenAI.GlobalStandard.text-embedding-ada-002,80"
          ]
        },
        "description": "Required. Location for AI Foundry deployment. This is the location where the AI Foundry resources will be deployed."
      }
    },
    "tags": {
      "type": "object",
      "metadata": {
        "__bicep_resource_derived_type!": {
          "source": "Microsoft.Resources/resourceGroups@2025-04-01#properties/tags"
        },
        "description": "Optional. The tags to apply to all deployed Azure resources."
      },
      "defaultValue": {}
    },
    "solutionUniqueText": {
      "type": "string",
      "defaultValue": "[substring(uniqueString(subscription().id, resourceGroup().name, parameters('solutionName')), 0, 5)]",
      "maxLength": 5,
      "metadata": {
        "description": "Optional. A unique text value for the solution. This is used to ensure resource names are unique for global resources. Defaults to a 5-character substring of the unique string generated from the subscription ID, resource group name, and solution name."
      }
    }
  },
  "variables": {
    "solutionLocation": "[if(empty(parameters('AZURE_LOCATION')), resourceGroup().location, parameters('AZURE_LOCATION'))]",
    "acrName": "kmcontainerreg",
    "baseUrl": "https://raw.githubusercontent.com/microsoft/Conversation-Knowledge-Mining-Solution-Accelerator/main/",
    "solutionSuffix": "[toLower(trim(replace(replace(replace(replace(replace(replace(format('{0}{1}', parameters('solutionName'), parameters('solutionUniqueText')), '-', ''), '_', ''), '.', ''), '/', ''), ' ', ''), '*', '')))]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/tags",
      "apiVersion": "2021-04-01",
      "name": "default",
      "properties": {
        "tags": "[shallowMerge(createArray(parameters('tags'), createObject('TemplateName', 'KM Generic')))]"
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy_managed_identity",
      "resourceGroup": "[resourceGroup().name]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "miName": {
            "value": "[format('id-{0}', variables('solutionSuffix'))]"
          },
          "solutionName": {
            "value": "[variables('solutionSuffix')]"
          },
          "solutionLocation": {
            "value": "[variables('solutionLocation')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "980762060893785293"
            }
          },
          "parameters": {
            "solutionName": {
              "type": "string",
              "minLength": 3,
              "maxLength": 16,
              "metadata": {
                "description": "Required. Contains Solution Name."
              }
            },
            "solutionLocation": {
              "type": "string",
              "metadata": {
                "description": "Required. Specifies the location for resources."
              }
            },
            "miName": {
              "type": "string",
              "metadata": {
                "description": "Required. Contains MI Name."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. The tags to apply to all deployed Azure resources."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2023-01-31",
              "name": "[parameters('miName')]",
              "location": "[parameters('solutionLocation')]",
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(resourceGroup().id, resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('miName')), resourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635'))]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('miName')), '2023-01-31').principalId]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('miName'))]"
              ]
            },
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2023-01-31",
              "name": "[format('{0}-backend-app-mi', parameters('solutionName'))]",
              "location": "[parameters('solutionLocation')]",
              "tags": {
                "app": "[parameters('solutionName')]",
                "location": "[parameters('solutionLocation')]"
              }
            }
          ],
          "outputs": {
            "managedIdentityOutput": {
              "type": "object",
              "metadata": {
                "description": "Contains Managed Identity Object details."
              },
              "value": {
                "id": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('miName'))]",
                "objectId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('miName')), '2023-01-31').principalId]",
                "clientId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('miName')), '2023-01-31').clientId]",
                "name": "[parameters('miName')]"
              }
            },
            "managedIdentityBackendAppOutput": {
              "type": "object",
              "metadata": {
                "description": "Contains Managed Identity Backend App Output details.."
              },
              "value": {
                "id": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-backend-app-mi', parameters('solutionName')))]",
                "objectId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-backend-app-mi', parameters('solutionName'))), '2023-01-31').principalId]",
                "clientId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-backend-app-mi', parameters('solutionName'))), '2023-01-31').clientId]",
                "name": "[format('{0}-backend-app-mi', parameters('solutionName'))]"
              }
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy_keyvault",
      "resourceGroup": "[resourceGroup().name]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "keyvaultName": {
            "value": "[format('kv-{0}', variables('solutionSuffix'))]"
          },
          "solutionLocation": {
            "value": "[variables('solutionLocation')]"
          },
          "managedIdentityObjectId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity'), '2022-09-01').outputs.managedIdentityOutput.value.objectId]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "10567914919872992443"
            }
          },
          "parameters": {
            "solutionLocation": {
              "type": "string",
              "metadata": {
                "description": "Required. Specifies the location for resources."
              }
            },
            "managedIdentityObjectId": {
              "type": "string",
              "metadata": {
                "description": "Required. Contains ID of Managed Identity."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags to be applied to the resources."
              }
            },
            "keyvaultName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2022-07-01",
              "name": "[parameters('keyvaultName')]",
              "location": "[parameters('solutionLocation')]",
              "properties": {
                "createMode": "default",
                "accessPolicies": [
                  {
                    "objectId": "[parameters('managedIdentityObjectId')]",
                    "permissions": {
                      "certificates": [
                        "all"
                      ],
                      "keys": [
                        "all"
                      ],
                      "secrets": [
                        "all"
                      ],
                      "storage": [
                        "all"
                      ]
                    },
                    "tenantId": "[subscription().tenantId]"
                  }
                ],
                "enabledForDeployment": true,
                "enabledForDiskEncryption": true,
                "enabledForTemplateDeployment": true,
                "enableRbacAuthorization": true,
                "publicNetworkAccess": "enabled",
                "sku": {
                  "family": "A",
                  "name": "standard"
                },
                "softDeleteRetentionInDays": 7,
                "tenantId": "[subscription().tenantId]"
              },
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(resourceGroup().id, parameters('managedIdentityObjectId'), resourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483'))]",
              "properties": {
                "principalId": "[parameters('managedIdentityObjectId')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483')]",
                "principalType": "ServicePrincipal"
              }
            }
          ],
          "outputs": {
            "keyvaultName": {
              "type": "string",
              "metadata": {
                "description": "Contains KeyVault Name."
              },
              "value": "[parameters('keyvaultName')]"
            },
            "keyvaultId": {
              "type": "string",
              "metadata": {
                "description": "Contains KeyVault ID."
              },
              "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyvaultName'))]"
            },
            "keyvaultUri": {
              "type": "string",
              "metadata": {
                "description": "Contains KeyVault URI."
              },
              "value": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('keyvaultName')), '2022-07-01').vaultUri]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy_ai_foundry",
      "resourceGroup": "[resourceGroup().name]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "solutionName": {
            "value": "[variables('solutionSuffix')]"
          },
          "solutionLocation": {
            "value": "[parameters('aiDeploymentsLocation')]"
          },
          "keyVaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_keyvault'), '2022-09-01').outputs.keyvaultName.value]"
          },
          "cuLocation": {
            "value": "[parameters('contentUnderstandingLocation')]"
          },
          "deploymentType": {
            "value": "[parameters('deploymentType')]"
          },
          "gptModelName": {
            "value": "[parameters('gptModelName')]"
          },
          "gptModelVersion": {
            "value": "[parameters('gptModelVersion')]"
          },
          "azureOpenAIApiVersion": {
            "value": "[parameters('azureOpenAIApiVersion')]"
          },
          "gptDeploymentCapacity": {
            "value": "[parameters('gptDeploymentCapacity')]"
          },
          "embeddingModel": {
            "value": "[parameters('embeddingModel')]"
          },
          "embeddingDeploymentCapacity": {
            "value": "[parameters('embeddingDeploymentCapacity')]"
          },
          "managedIdentityObjectId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity'), '2022-09-01').outputs.managedIdentityOutput.value.objectId]"
          },
          "existingLogAnalyticsWorkspaceId": {
            "value": "[parameters('existingLogAnalyticsWorkspaceId')]"
          },
          "azureExistingAIProjectResourceId": {
            "value": "[parameters('azureExistingAIProjectResourceId')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "1168742782096335746"
            }
          },
          "parameters": {
            "solutionName": {
              "type": "string",
              "minLength": 3,
              "maxLength": 16,
              "metadata": {
                "description": "Required. Contains Solution Name"
              }
            },
            "solutionLocation": {
              "type": "string",
              "metadata": {
                "description": "Required. Specifies the location for resources."
              }
            },
            "keyVaultName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Contains KeyVault Name"
              }
            },
            "cuLocation": {
              "type": "string",
              "metadata": {
                "description": "Required. Contains CU Location"
              }
            },
            "deploymentType": {
              "type": "string",
              "metadata": {
                "description": "Required. Contains type of Deployment"
              }
            },
            "gptModelName": {
              "type": "string",
              "metadata": {
                "description": "Required. Contains GPT mode Name"
              }
            },
            "gptModelVersion": {
              "type": "string",
              "metadata": {
                "description": "Required. Contains GPT Model Version"
              }
            },
            "azureOpenAIApiVersion": {
              "type": "string",
              "metadata": {
                "description": "Required. Contains Open AI API version"
              }
            },
            "gptDeploymentCapacity": {
              "type": "int",
              "metadata": {
                "description": "Required. Contains GPT Deployment Capacity"
              }
            },
            "embeddingModel": {
              "type": "string",
              "metadata": {
                "description": "Required. Contains Embedding Model"
              }
            },
            "embeddingDeploymentCapacity": {
              "type": "int",
              "metadata": {
                "description": "Required. Contains Embedding Deployment Capacity"
              }
            },
            "managedIdentityObjectId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Contains Managed Identity ObjectID"
              }
            },
            "existingLogAnalyticsWorkspaceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Contains existing Log Analytics Workspace ID"
              }
            },
            "azureExistingAIProjectResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Contains existing AI Project Resource ID"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags to be applied to the resources."
              }
            }
          },
          "variables": {
            "aiServicesName": "[format('aisa-{0}', parameters('solutionName'))]",
            "aiServicesName_cu": "[format('aisa-{0}-cu', parameters('solutionName'))]",
            "location_cu": "[parameters('cuLocation')]",
            "workspaceName": "[format('log-{0}', parameters('solutionName'))]",
            "applicationInsightsName": "[format('appi-{0}', parameters('solutionName'))]",
            "keyvaultName": "[format('kv-{0}', parameters('solutionName'))]",
            "location": "[parameters('solutionLocation')]",
            "aiProjectName": "[format('proj-{0}', parameters('solutionName'))]",
            "aiSearchName": "[format('srch-{0}', parameters('solutionName'))]",
            "aiSearchConnectionName": "[format('myCon-{0}', parameters('solutionName'))]",
            "aiModelDeployments": [
              {
                "name": "[parameters('gptModelName')]",
                "model": "[parameters('gptModelName')]",
                "sku": {
                  "name": "[parameters('deploymentType')]",
                  "capacity": "[parameters('gptDeploymentCapacity')]"
                },
                "version": "[parameters('gptModelVersion')]",
                "raiPolicyName": "Microsoft.Default"
              },
              {
                "name": "[parameters('embeddingModel')]",
                "model": "[parameters('embeddingModel')]",
                "sku": {
                  "name": "GlobalStandard",
                  "capacity": "[parameters('embeddingDeploymentCapacity')]"
                },
                "raiPolicyName": "Microsoft.Default"
              }
            ],
            "useExisting": "[not(empty(parameters('existingLogAnalyticsWorkspaceId')))]",
            "existingLawSubscription": "[if(variables('useExisting'), split(parameters('existingLogAnalyticsWorkspaceId'), '/')[2], '')]",
            "existingLawResourceGroup": "[if(variables('useExisting'), split(parameters('existingLogAnalyticsWorkspaceId'), '/')[4], '')]",
            "existingLawName": "[if(variables('useExisting'), split(parameters('existingLogAnalyticsWorkspaceId'), '/')[8], '')]",
            "existingOpenAIEndpoint": "[if(not(empty(parameters('azureExistingAIProjectResourceId'))), format('https://{0}.openai.azure.com/', split(parameters('azureExistingAIProjectResourceId'), '/')[8]), '')]",
            "existingProjEndpoint": "[if(not(empty(parameters('azureExistingAIProjectResourceId'))), format('https://{0}.services.ai.azure.com/api/projects/{1}', split(parameters('azureExistingAIProjectResourceId'), '/')[8], split(parameters('azureExistingAIProjectResourceId'), '/')[10]), '')]",
            "existingAIServicesName": "[if(not(empty(parameters('azureExistingAIProjectResourceId'))), split(parameters('azureExistingAIProjectResourceId'), '/')[8], '')]",
            "existingAIProjectName": "[if(not(empty(parameters('azureExistingAIProjectResourceId'))), split(parameters('azureExistingAIProjectResourceId'), '/')[10], '')]",
            "existingAIServiceSubscription": "[if(not(empty(parameters('azureExistingAIProjectResourceId'))), split(parameters('azureExistingAIProjectResourceId'), '/')[2], subscription().subscriptionId)]",
            "existingAIServiceResourceGroup": "[if(not(empty(parameters('azureExistingAIProjectResourceId'))), split(parameters('azureExistingAIProjectResourceId'), '/')[4], resourceGroup().name)]"
          },
          "resources": [
            {
              "condition": "[not(variables('useExisting'))]",
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2023-09-01",
              "name": "[variables('workspaceName')]",
              "location": "[variables('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "retentionInDays": 30,
                "sku": {
                  "name": "PerGB2018"
                }
              }
            },
            {
              "type": "Microsoft.Insights/components",
              "apiVersion": "2020-02-02",
              "name": "[variables('applicationInsightsName')]",
              "location": "[variables('location')]",
              "kind": "web",
              "properties": {
                "Application_Type": "web",
                "publicNetworkAccessForIngestion": "Enabled",
                "publicNetworkAccessForQuery": "Disabled",
                "WorkspaceResourceId": "[if(variables('useExisting'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('existingLawSubscription'), variables('existingLawResourceGroup')), 'Microsoft.OperationalInsights/workspaces', variables('existingLawName')), resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName')))]"
              },
              "tags": "[parameters('tags')]",
              "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName'))]"
              ]
            },
            {
              "condition": "[empty(parameters('azureExistingAIProjectResourceId'))]",
              "type": "Microsoft.CognitiveServices/accounts",
              "apiVersion": "2025-04-01-preview",
              "name": "[variables('aiServicesName')]",
              "location": "[variables('location')]",
              "sku": {
                "name": "S0"
              },
              "kind": "AIServices",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "allowProjectManagement": true,
                "customSubDomainName": "[variables('aiServicesName')]",
                "networkAcls": {
                  "defaultAction": "Allow",
                  "virtualNetworkRules": [],
                  "ipRules": []
                },
                "publicNetworkAccess": "Enabled",
                "disableLocalAuth": false
              },
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.CognitiveServices/accounts",
              "apiVersion": "2025-04-01-preview",
              "name": "[variables('aiServicesName_cu')]",
              "location": "[variables('location_cu')]",
              "sku": {
                "name": "S0"
              },
              "kind": "AIServices",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "allowProjectManagement": true,
                "customSubDomainName": "[variables('aiServicesName_cu')]",
                "networkAcls": {
                  "defaultAction": "Allow",
                  "virtualNetworkRules": [],
                  "ipRules": []
                },
                "publicNetworkAccess": "Enabled",
                "disableLocalAuth": false
              },
              "tags": "[parameters('tags')]"
            },
            {
              "copy": {
                "name": "aiServicesDeployments",
                "count": "[length(variables('aiModelDeployments'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "condition": "[empty(parameters('azureExistingAIProjectResourceId'))]",
              "type": "Microsoft.CognitiveServices/accounts/deployments",
              "apiVersion": "2025-04-01-preview",
              "name": "[format('{0}/{1}', variables('aiServicesName'), variables('aiModelDeployments')[copyIndex()].name)]",
              "properties": {
                "model": {
                  "format": "OpenAI",
                  "name": "[variables('aiModelDeployments')[copyIndex()].model]"
                },
                "raiPolicyName": "[variables('aiModelDeployments')[copyIndex()].raiPolicyName]"
              },
              "sku": {
                "name": "[variables('aiModelDeployments')[copyIndex()].sku.name]",
                "capacity": "[variables('aiModelDeployments')[copyIndex()].sku.capacity]"
              },
              "tags": "[parameters('tags')]",
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', variables('aiServicesName'))]"
              ]
            },
            {
              "type": "Microsoft.Search/searchServices",
              "apiVersion": "2024-06-01-preview",
              "name": "[variables('aiSearchName')]",
              "location": "[parameters('solutionLocation')]",
              "sku": {
                "name": "basic"
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "replicaCount": 1,
                "partitionCount": 1,
                "hostingMode": "default",
                "publicNetworkAccess": "enabled",
                "networkRuleSet": {
                  "ipRules": []
                },
                "encryptionWithCmk": {
                  "enforcement": "Unspecified"
                },
                "disableLocalAuth": true,
                "semanticSearch": "free"
              },
              "tags": "[parameters('tags')]"
            },
            {
              "condition": "[empty(parameters('azureExistingAIProjectResourceId'))]",
              "type": "Microsoft.CognitiveServices/accounts/projects",
              "apiVersion": "2025-04-01-preview",
              "name": "[format('{0}/{1}', variables('aiServicesName'), variables('aiProjectName'))]",
              "location": "[parameters('solutionLocation')]",
              "kind": "AIServices",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {},
              "tags": "[parameters('tags')]",
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', variables('aiServicesName'))]"
              ]
            },
            {
              "condition": "[empty(parameters('azureExistingAIProjectResourceId'))]",
              "type": "Microsoft.CognitiveServices/accounts/projects/connections",
              "apiVersion": "2025-04-01-preview",
              "name": "[format('{0}/{1}/{2}', variables('aiServicesName'), variables('aiProjectName'), variables('aiSearchConnectionName'))]",
              "properties": {
                "category": "CognitiveSearch",
                "target": "[format('https://{0}.search.windows.net', variables('aiSearchName'))]",
                "authType": "AAD",
                "isSharedToAll": true,
                "metadata": {
                  "ApiType": "Azure",
                  "ResourceId": "[resourceId('Microsoft.Search/searchServices', variables('aiSearchName'))]",
                  "location": "[reference(resourceId('Microsoft.Search/searchServices', variables('aiSearchName')), '2024-06-01-preview', 'full').location]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts/projects', variables('aiServicesName'), variables('aiProjectName'))]",
                "[resourceId('Microsoft.Search/searchServices', variables('aiSearchName'))]"
              ]
            },
            {
              "condition": "[empty(parameters('azureExistingAIProjectResourceId'))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', variables('aiServicesName'))]",
              "name": "[guid(resourceGroup().id, resourceId('Microsoft.CognitiveServices/accounts', variables('aiServicesName')), resourceId('Microsoft.Authorization/roleDefinitions', '53ca6127-db72-4b80-b1b0-d745d6d5456d'))]",
              "properties": {
                "principalId": "[parameters('managedIdentityObjectId')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '53ca6127-db72-4b80-b1b0-d745d6d5456d')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', variables('aiServicesName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', variables('aiServicesName_cu'))]",
              "name": "[guid(resourceGroup().id, resourceId('Microsoft.CognitiveServices/accounts', variables('aiServicesName_cu')), resourceId('Microsoft.Authorization/roleDefinitions', '53ca6127-db72-4b80-b1b0-d745d6d5456d'))]",
              "properties": {
                "principalId": "[parameters('managedIdentityObjectId')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '53ca6127-db72-4b80-b1b0-d745d6d5456d')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', variables('aiServicesName_cu'))]"
              ]
            },
            {
              "condition": "[empty(parameters('azureExistingAIProjectResourceId'))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', variables('aiServicesName'))]",
              "name": "[guid(resourceGroup().id, resourceId('Microsoft.CognitiveServices/accounts', variables('aiServicesName')), resourceId('Microsoft.Authorization/roleDefinitions', '5e0bd9bd-7b93-4f28-af87-19fc36ad61bd'))]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.Search/searchServices', variables('aiSearchName')), '2024-06-01-preview', 'full').identity.principalId]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '5e0bd9bd-7b93-4f28-af87-19fc36ad61bd')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Search/searchServices', variables('aiSearchName'))]",
                "[resourceId('Microsoft.CognitiveServices/accounts', variables('aiServicesName'))]"
              ]
            },
            {
              "condition": "[empty(parameters('azureExistingAIProjectResourceId'))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', variables('aiSearchName'))]",
              "name": "[guid(resourceGroup().id, resourceId('Microsoft.CognitiveServices/accounts/projects', variables('aiServicesName'), variables('aiProjectName')), resourceId('Microsoft.Authorization/roleDefinitions', '1407120a-92aa-4202-b7e9-c0e197c71c8f'))]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.CognitiveServices/accounts/projects', variables('aiServicesName'), variables('aiProjectName')), '2025-04-01-preview', 'full').identity.principalId]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '1407120a-92aa-4202-b7e9-c0e197c71c8f')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts/projects', variables('aiServicesName'), variables('aiProjectName'))]",
                "[resourceId('Microsoft.Search/searchServices', variables('aiSearchName'))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('azureExistingAIProjectResourceId')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', variables('aiSearchName'))]",
              "name": "[guid(resourceGroup().id, variables('existingAIProjectName'), resourceId('Microsoft.Authorization/roleDefinitions', '1407120a-92aa-4202-b7e9-c0e197c71c8f'), 'Existing')]",
              "properties": {
                "principalId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('existingAIServiceSubscription'), variables('existingAIServiceResourceGroup')), 'Microsoft.Resources/deployments', 'assignOpenAIRoleToAISearchExisting'), '2022-09-01').outputs.aiProjectPrincipalId.value]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '1407120a-92aa-4202-b7e9-c0e197c71c8f')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Search/searchServices', variables('aiSearchName'))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('existingAIServiceSubscription'), variables('existingAIServiceResourceGroup')), 'Microsoft.Resources/deployments', 'assignOpenAIRoleToAISearchExisting')]"
              ]
            },
            {
              "condition": "[empty(parameters('azureExistingAIProjectResourceId'))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', variables('aiSearchName'))]",
              "name": "[guid(resourceGroup().id, resourceId('Microsoft.CognitiveServices/accounts/projects', variables('aiServicesName'), variables('aiProjectName')), resourceId('Microsoft.Authorization/roleDefinitions', '7ca78c08-252a-4471-8644-bb5ff32d4ba0'))]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.CognitiveServices/accounts/projects', variables('aiServicesName'), variables('aiProjectName')), '2025-04-01-preview', 'full').identity.principalId]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '7ca78c08-252a-4471-8644-bb5ff32d4ba0')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts/projects', variables('aiServicesName'), variables('aiProjectName'))]",
                "[resourceId('Microsoft.Search/searchServices', variables('aiSearchName'))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('azureExistingAIProjectResourceId')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', variables('aiSearchName'))]",
              "name": "[guid(resourceGroup().id, variables('existingAIProjectName'), resourceId('Microsoft.Authorization/roleDefinitions', '7ca78c08-252a-4471-8644-bb5ff32d4ba0'), 'Existing')]",
              "properties": {
                "principalId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('existingAIServiceSubscription'), variables('existingAIServiceResourceGroup')), 'Microsoft.Resources/deployments', 'assignOpenAIRoleToAISearchExisting'), '2022-09-01').outputs.aiProjectPrincipalId.value]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '7ca78c08-252a-4471-8644-bb5ff32d4ba0')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Search/searchServices', variables('aiSearchName'))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('existingAIServiceSubscription'), variables('existingAIServiceResourceGroup')), 'Microsoft.Resources/deployments', 'assignOpenAIRoleToAISearchExisting')]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', variables('aiSearchName'))]",
              "name": "[guid(resourceGroup().id, resourceId('Microsoft.CognitiveServices/accounts/projects', variables('aiServicesName'), variables('aiProjectName')), resourceId('Microsoft.Authorization/roleDefinitions', '8ebe5a00-799e-43f5-93ac-243d3dce84a7'))]",
              "properties": {
                "principalId": "[parameters('managedIdentityObjectId')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '8ebe5a00-799e-43f5-93ac-243d3dce84a7')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts/projects', variables('aiServicesName'), variables('aiProjectName'))]",
                "[resourceId('Microsoft.Search/searchServices', variables('aiSearchName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'TENANT-ID')]",
              "properties": {
                "value": "[subscription().tenantId]"
              },
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-OPENAI-INFERENCE-ENDPOINT')]",
              "properties": {
                "value": ""
              },
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-OPENAI-INFERENCE-KEY')]",
              "properties": {
                "value": ""
              },
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-OPENAI-DEPLOYMENT-MODEL')]",
              "properties": {
                "value": "[parameters('gptModelName')]"
              },
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-OPENAI-PREVIEW-API-VERSION')]",
              "properties": {
                "value": "[parameters('azureOpenAIApiVersion')]"
              },
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-OPENAI-ENDPOINT')]",
              "properties": {
                "value": "[if(not(empty(variables('existingOpenAIEndpoint'))), variables('existingOpenAIEndpoint'), reference(resourceId('Microsoft.CognitiveServices/accounts', variables('aiServicesName')), '2025-04-01-preview').endpoints['OpenAI Language Model Instance API'])]"
              },
              "tags": "[parameters('tags')]",
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', variables('aiServicesName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-OPENAI-EMBEDDING-MODEL')]",
              "properties": {
                "value": "[parameters('embeddingModel')]"
              },
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-OPENAI-CU-ENDPOINT')]",
              "properties": {
                "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', variables('aiServicesName_cu')), '2025-04-01-preview').endpoints['OpenAI Language Model Instance API']]"
              },
              "tags": "[parameters('tags')]",
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', variables('aiServicesName_cu'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-OPENAI-CU-VERSION')]",
              "properties": {
                "value": "?api-version=2024-12-01-preview"
              },
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-SEARCH-ENDPOINT')]",
              "properties": {
                "value": "[format('https://{0}.search.windows.net', variables('aiSearchName'))]"
              },
              "tags": "[parameters('tags')]",
              "dependsOn": [
                "[resourceId('Microsoft.Search/searchServices', variables('aiSearchName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-SEARCH-SERVICE')]",
              "properties": {
                "value": "[variables('aiSearchName')]"
              },
              "tags": "[parameters('tags')]",
              "dependsOn": [
                "[resourceId('Microsoft.Search/searchServices', variables('aiSearchName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-SEARCH-INDEX')]",
              "properties": {
                "value": "transcripts_index"
              },
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'COG-SERVICES-ENDPOINT')]",
              "properties": {
                "value": "[if(not(empty(variables('existingOpenAIEndpoint'))), variables('existingOpenAIEndpoint'), reference(resourceId('Microsoft.CognitiveServices/accounts', variables('aiServicesName')), '2025-04-01-preview').endpoints['OpenAI Language Model Instance API'])]"
              },
              "tags": "[parameters('tags')]",
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', variables('aiServicesName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'COG-SERVICES-NAME')]",
              "properties": {
                "value": "[variables('aiServicesName')]"
              },
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-SUBSCRIPTION-ID')]",
              "properties": {
                "value": "[subscription().subscriptionId]"
              },
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-RESOURCE-GROUP')]",
              "properties": {
                "value": "[resourceGroup().name]"
              },
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-LOCATION')]",
              "properties": {
                "value": "[parameters('solutionLocation')]"
              },
              "tags": "[parameters('tags')]"
            },
            {
              "condition": "[not(empty(parameters('azureExistingAIProjectResourceId')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "existing_foundry_project",
              "subscriptionId": "[variables('existingAIServiceSubscription')]",
              "resourceGroup": "[variables('existingAIServiceResourceGroup')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "aiServicesName": {
                    "value": "[variables('existingAIServicesName')]"
                  },
                  "aiProjectName": {
                    "value": "[variables('existingAIProjectName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "1956530086715880237"
                    }
                  },
                  "parameters": {
                    "aiServicesName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the existing Azure AI Services account"
                      }
                    },
                    "aiProjectName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the existing AI Project under the AI Services account"
                      }
                    }
                  },
                  "resources": [],
                  "outputs": {
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Contains Service Location."
                      },
                      "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), '2025-04-01-preview', 'full').location]"
                    },
                    "skuName": {
                      "type": "string",
                      "metadata": {
                        "description": "Contains SKU Name."
                      },
                      "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), '2025-04-01-preview', 'full').sku.name]"
                    },
                    "kind": {
                      "type": "string",
                      "metadata": {
                        "description": "Contains Kind of Service."
                      },
                      "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), '2025-04-01-preview', 'full').kind]"
                    },
                    "allowProjectManagement": {
                      "type": "bool",
                      "metadata": {
                        "description": "Specifies whether to Enable or Disable Project Management."
                      },
                      "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), '2025-04-01-preview').allowProjectManagement]"
                    },
                    "customSubDomainName": {
                      "type": "string",
                      "metadata": {
                        "description": "Contains Custom Sub Domain Name."
                      },
                      "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), '2025-04-01-preview').customSubDomainName]"
                    },
                    "publicNetworkAccess": {
                      "type": "string",
                      "metadata": {
                        "description": "Contains Properties of Public Network Access."
                      },
                      "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), '2025-04-01-preview').publicNetworkAccess]"
                    },
                    "defaultNetworkAction": {
                      "type": "string",
                      "metadata": {
                        "description": "Contains Default Network Action."
                      },
                      "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), '2025-04-01-preview').networkAcls.defaultAction]"
                    },
                    "ipRules": {
                      "type": "array",
                      "metadata": {
                        "description": "Contains the IP Rules."
                      },
                      "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), '2025-04-01-preview').networkAcls.ipRules]"
                    },
                    "vnetRules": {
                      "type": "array",
                      "metadata": {
                        "description": "Contains VNET Rules."
                      },
                      "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), '2025-04-01-preview').networkAcls.virtualNetworkRules]"
                    },
                    "projectLocation": {
                      "type": "string",
                      "metadata": {
                        "description": "Contains Location of Project."
                      },
                      "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts/projects', parameters('aiServicesName'), parameters('aiProjectName')), '2025-04-01-preview', 'full').location]"
                    },
                    "projectKind": {
                      "type": "string",
                      "metadata": {
                        "description": "Contains Kind of Project."
                      },
                      "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts/projects', parameters('aiServicesName'), parameters('aiProjectName')), '2025-04-01-preview', 'full').kind]"
                    },
                    "projectProvisioningState": {
                      "type": "string",
                      "metadata": {
                        "description": "Contains Project Provisioning State."
                      },
                      "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts/projects', parameters('aiServicesName'), parameters('aiProjectName')), '2025-04-01-preview').provisioningState]"
                    }
                  }
                }
              }
            },
            {
              "condition": "[not(empty(parameters('azureExistingAIProjectResourceId')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "aiProjectSearchConnectionDeployment",
              "subscriptionId": "[variables('existingAIServiceSubscription')]",
              "resourceGroup": "[variables('existingAIServiceResourceGroup')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "existingAIProjectName": {
                    "value": "[variables('existingAIProjectName')]"
                  },
                  "existingAIServicesName": {
                    "value": "[variables('existingAIServicesName')]"
                  },
                  "aiSearchName": {
                    "value": "[variables('aiSearchName')]"
                  },
                  "aiSearchResourceId": {
                    "value": "[resourceId('Microsoft.Search/searchServices', variables('aiSearchName'))]"
                  },
                  "aiSearchLocation": {
                    "value": "[reference(resourceId('Microsoft.Search/searchServices', variables('aiSearchName')), '2024-06-01-preview', 'full').location]"
                  },
                  "aiSearchConnectionName": {
                    "value": "[variables('aiSearchConnectionName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "6187142664706733596"
                    }
                  },
                  "parameters": {
                    "existingAIProjectName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Contains existing AI Project Name"
                      }
                    },
                    "existingAIServicesName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Contains existing AI Services Name"
                      }
                    },
                    "aiSearchName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Contains AI Search Name"
                      }
                    },
                    "aiSearchResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Contains AI Search Resource ID"
                      }
                    },
                    "aiSearchLocation": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Contains AI Search Location"
                      }
                    },
                    "aiSearchConnectionName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Contains AI Search Connection Name"
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.CognitiveServices/accounts/projects/connections",
                      "apiVersion": "2025-04-01-preview",
                      "name": "[format('{0}/{1}/{2}', parameters('existingAIServicesName'), parameters('existingAIProjectName'), parameters('aiSearchConnectionName'))]",
                      "properties": {
                        "category": "CognitiveSearch",
                        "target": "[format('https://{0}.search.windows.net', parameters('aiSearchName'))]",
                        "authType": "AAD",
                        "isSharedToAll": true,
                        "metadata": {
                          "ApiType": "Azure",
                          "ResourceId": "[parameters('aiSearchResourceId')]",
                          "location": "[parameters('aiSearchLocation')]"
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Search/searchServices', variables('aiSearchName'))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('azureExistingAIProjectResourceId')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "assignFoundryRoleToMI",
              "subscriptionId": "[variables('existingAIServiceSubscription')]",
              "resourceGroup": "[variables('existingAIServiceResourceGroup')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "roleDefinitionId": {
                    "value": "[resourceId('Microsoft.Authorization/roleDefinitions', '53ca6127-db72-4b80-b1b0-d745d6d5456d')]"
                  },
                  "roleAssignmentName": {
                    "value": "[guid(resourceGroup().id, parameters('managedIdentityObjectId'), resourceId('Microsoft.Authorization/roleDefinitions', '53ca6127-db72-4b80-b1b0-d745d6d5456d'), 'foundry')]"
                  },
                  "aiServicesName": {
                    "value": "[variables('existingAIServicesName')]"
                  },
                  "aiProjectName": {
                    "value": "[variables('existingAIProjectName')]"
                  },
                  "principalId": {
                    "value": "[parameters('managedIdentityObjectId')]"
                  },
                  "aiLocation": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('existingAIServiceSubscription'), variables('existingAIServiceResourceGroup')), 'Microsoft.Resources/deployments', 'existing_foundry_project'), '2022-09-01').outputs.location.value]"
                  },
                  "aiKind": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('existingAIServiceSubscription'), variables('existingAIServiceResourceGroup')), 'Microsoft.Resources/deployments', 'existing_foundry_project'), '2022-09-01').outputs.kind.value]"
                  },
                  "aiSkuName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('existingAIServiceSubscription'), variables('existingAIServiceResourceGroup')), 'Microsoft.Resources/deployments', 'existing_foundry_project'), '2022-09-01').outputs.skuName.value]"
                  },
                  "customSubDomainName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('existingAIServiceSubscription'), variables('existingAIServiceResourceGroup')), 'Microsoft.Resources/deployments', 'existing_foundry_project'), '2022-09-01').outputs.customSubDomainName.value]"
                  },
                  "publicNetworkAccess": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('existingAIServiceSubscription'), variables('existingAIServiceResourceGroup')), 'Microsoft.Resources/deployments', 'existing_foundry_project'), '2022-09-01').outputs.publicNetworkAccess.value]"
                  },
                  "enableSystemAssignedIdentity": {
                    "value": true
                  },
                  "defaultNetworkAction": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('existingAIServiceSubscription'), variables('existingAIServiceResourceGroup')), 'Microsoft.Resources/deployments', 'existing_foundry_project'), '2022-09-01').outputs.defaultNetworkAction.value]"
                  },
                  "vnetRules": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('existingAIServiceSubscription'), variables('existingAIServiceResourceGroup')), 'Microsoft.Resources/deployments', 'existing_foundry_project'), '2022-09-01').outputs.vnetRules.value]"
                  },
                  "ipRules": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('existingAIServiceSubscription'), variables('existingAIServiceResourceGroup')), 'Microsoft.Resources/deployments', 'existing_foundry_project'), '2022-09-01').outputs.ipRules.value]"
                  },
                  "aiModelDeployments": {
                    "value": "[variables('aiModelDeployments')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "8648115976263226848"
                    }
                  },
                  "parameters": {
                    "principalId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Contains Principle ID."
                      }
                    },
                    "roleDefinitionId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Contains Role Definition ID."
                      }
                    },
                    "roleAssignmentName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Contains Role Assignment Name."
                      }
                    },
                    "aiServicesName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Contains AI Services Name."
                      }
                    },
                    "aiProjectName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Contains AI Project Name."
                      }
                    },
                    "aiLocation": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Contains AI Location."
                      }
                    },
                    "aiKind": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Contains AI Kind."
                      }
                    },
                    "aiSkuName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Contains AI SKU Name."
                      }
                    },
                    "enableSystemAssignedIdentity": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Whether to Enable or Disable System Assigned Identity."
                      }
                    },
                    "customSubDomainName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Contains Custom Sub Domain Name."
                      }
                    },
                    "publicNetworkAccess": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Contains Public Network Access."
                      }
                    },
                    "defaultNetworkAction": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Contains Default Network Action."
                      }
                    },
                    "vnetRules": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Required. Contains VNET Rules."
                      }
                    },
                    "ipRules": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Required. Contains IP Rules."
                      }
                    },
                    "aiModelDeployments": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Required. Contains AI Model Deployments."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags to be applied to the resources."
                      }
                    }
                  },
                  "resources": [
                    {
                      "condition": "[parameters('enableSystemAssignedIdentity')]",
                      "type": "Microsoft.CognitiveServices/accounts",
                      "apiVersion": "2025-04-01-preview",
                      "name": "[parameters('aiServicesName')]",
                      "location": "[parameters('aiLocation')]",
                      "kind": "[parameters('aiKind')]",
                      "sku": {
                        "name": "[parameters('aiSkuName')]"
                      },
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "properties": {
                        "allowProjectManagement": true,
                        "customSubDomainName": "[parameters('customSubDomainName')]",
                        "networkAcls": {
                          "defaultAction": "[parameters('defaultNetworkAction')]",
                          "virtualNetworkRules": "[parameters('vnetRules')]",
                          "ipRules": "[parameters('ipRules')]"
                        },
                        "publicNetworkAccess": "[parameters('publicNetworkAccess')]"
                      },
                      "tags": "[parameters('tags')]"
                    },
                    {
                      "copy": {
                        "name": "aiServicesDeployments",
                        "count": "[length(parameters('aiModelDeployments'))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "condition": "[not(empty(parameters('aiModelDeployments')))]",
                      "type": "Microsoft.CognitiveServices/accounts/deployments",
                      "apiVersion": "2025-04-01-preview",
                      "name": "[format('{0}/{1}', parameters('aiServicesName'), parameters('aiModelDeployments')[copyIndex()].name)]",
                      "properties": {
                        "model": {
                          "format": "OpenAI",
                          "name": "[parameters('aiModelDeployments')[copyIndex()].model]"
                        },
                        "raiPolicyName": "[parameters('aiModelDeployments')[copyIndex()].raiPolicyName]"
                      },
                      "sku": {
                        "name": "[parameters('aiModelDeployments')[copyIndex()].sku.name]",
                        "capacity": "[parameters('aiModelDeployments')[copyIndex()].sku.capacity]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName'))]"
                      ]
                    },
                    {
                      "condition": "[and(not(empty(parameters('aiProjectName'))), parameters('enableSystemAssignedIdentity'))]",
                      "type": "Microsoft.CognitiveServices/accounts/projects",
                      "apiVersion": "2025-04-01-preview",
                      "name": "[format('{0}/{1}', parameters('aiServicesName'), parameters('aiProjectName'))]",
                      "location": "[parameters('aiLocation')]",
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "properties": {},
                      "tags": "[parameters('tags')]",
                      "dependsOn": [
                        "[resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName'))]"
                      ]
                    },
                    {
                      "condition": "[parameters('enableSystemAssignedIdentity')]",
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('aiServicesName'))]",
                      "name": "[parameters('roleAssignmentName')]",
                      "properties": {
                        "roleDefinitionId": "[parameters('roleDefinitionId')]",
                        "principalId": "[parameters('principalId')]",
                        "principalType": "ServicePrincipal"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName'))]"
                      ]
                    },
                    {
                      "condition": "[not(parameters('enableSystemAssignedIdentity'))]",
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('aiServicesName'))]",
                      "name": "[parameters('roleAssignmentName')]",
                      "properties": {
                        "roleDefinitionId": "[parameters('roleDefinitionId')]",
                        "principalId": "[parameters('principalId')]",
                        "principalType": "ServicePrincipal"
                      }
                    }
                  ],
                  "outputs": {
                    "aiServicesPrincipalId": {
                      "type": "string",
                      "value": "[if(parameters('enableSystemAssignedIdentity'), reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), '2025-04-01-preview', 'full').identity.principalId, reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), '2025-04-01-preview', 'full').identity.principalId)]"
                    },
                    "aiProjectPrincipalId": {
                      "type": "string",
                      "value": "[if(not(empty(parameters('aiProjectName'))), if(parameters('enableSystemAssignedIdentity'), reference(resourceId('Microsoft.CognitiveServices/accounts/projects', parameters('aiServicesName'), parameters('aiProjectName')), '2025-04-01-preview', 'full').identity.principalId, reference(resourceId('Microsoft.CognitiveServices/accounts/projects', parameters('aiServicesName'), parameters('aiProjectName')), '2025-04-01-preview', 'full').identity.principalId), '')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('existingAIServiceSubscription'), variables('existingAIServiceResourceGroup')), 'Microsoft.Resources/deployments', 'existing_foundry_project')]"
              ]
            },
            {
              "condition": "[not(empty(parameters('azureExistingAIProjectResourceId')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "assignOpenAIRoleToAISearchExisting",
              "subscriptionId": "[variables('existingAIServiceSubscription')]",
              "resourceGroup": "[variables('existingAIServiceResourceGroup')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "roleDefinitionId": {
                    "value": "[resourceId('Microsoft.Authorization/roleDefinitions', '5e0bd9bd-7b93-4f28-af87-19fc36ad61bd')]"
                  },
                  "roleAssignmentName": {
                    "value": "[guid(resourceGroup().id, resourceId('Microsoft.Search/searchServices', variables('aiSearchName')), resourceId('Microsoft.Authorization/roleDefinitions', '5e0bd9bd-7b93-4f28-af87-19fc36ad61bd'), 'openai-foundry')]"
                  },
                  "aiServicesName": {
                    "value": "[variables('existingAIServicesName')]"
                  },
                  "aiProjectName": {
                    "value": "[variables('existingAIProjectName')]"
                  },
                  "principalId": {
                    "value": "[reference(resourceId('Microsoft.Search/searchServices', variables('aiSearchName')), '2024-06-01-preview', 'full').identity.principalId]"
                  },
                  "enableSystemAssignedIdentity": {
                    "value": false
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "8648115976263226848"
                    }
                  },
                  "parameters": {
                    "principalId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Contains Principle ID."
                      }
                    },
                    "roleDefinitionId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Contains Role Definition ID."
                      }
                    },
                    "roleAssignmentName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Contains Role Assignment Name."
                      }
                    },
                    "aiServicesName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Contains AI Services Name."
                      }
                    },
                    "aiProjectName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Contains AI Project Name."
                      }
                    },
                    "aiLocation": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Contains AI Location."
                      }
                    },
                    "aiKind": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Contains AI Kind."
                      }
                    },
                    "aiSkuName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Contains AI SKU Name."
                      }
                    },
                    "enableSystemAssignedIdentity": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Whether to Enable or Disable System Assigned Identity."
                      }
                    },
                    "customSubDomainName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Contains Custom Sub Domain Name."
                      }
                    },
                    "publicNetworkAccess": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Contains Public Network Access."
                      }
                    },
                    "defaultNetworkAction": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Contains Default Network Action."
                      }
                    },
                    "vnetRules": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Required. Contains VNET Rules."
                      }
                    },
                    "ipRules": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Required. Contains IP Rules."
                      }
                    },
                    "aiModelDeployments": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Required. Contains AI Model Deployments."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags to be applied to the resources."
                      }
                    }
                  },
                  "resources": [
                    {
                      "condition": "[parameters('enableSystemAssignedIdentity')]",
                      "type": "Microsoft.CognitiveServices/accounts",
                      "apiVersion": "2025-04-01-preview",
                      "name": "[parameters('aiServicesName')]",
                      "location": "[parameters('aiLocation')]",
                      "kind": "[parameters('aiKind')]",
                      "sku": {
                        "name": "[parameters('aiSkuName')]"
                      },
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "properties": {
                        "allowProjectManagement": true,
                        "customSubDomainName": "[parameters('customSubDomainName')]",
                        "networkAcls": {
                          "defaultAction": "[parameters('defaultNetworkAction')]",
                          "virtualNetworkRules": "[parameters('vnetRules')]",
                          "ipRules": "[parameters('ipRules')]"
                        },
                        "publicNetworkAccess": "[parameters('publicNetworkAccess')]"
                      },
                      "tags": "[parameters('tags')]"
                    },
                    {
                      "copy": {
                        "name": "aiServicesDeployments",
                        "count": "[length(parameters('aiModelDeployments'))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "condition": "[not(empty(parameters('aiModelDeployments')))]",
                      "type": "Microsoft.CognitiveServices/accounts/deployments",
                      "apiVersion": "2025-04-01-preview",
                      "name": "[format('{0}/{1}', parameters('aiServicesName'), parameters('aiModelDeployments')[copyIndex()].name)]",
                      "properties": {
                        "model": {
                          "format": "OpenAI",
                          "name": "[parameters('aiModelDeployments')[copyIndex()].model]"
                        },
                        "raiPolicyName": "[parameters('aiModelDeployments')[copyIndex()].raiPolicyName]"
                      },
                      "sku": {
                        "name": "[parameters('aiModelDeployments')[copyIndex()].sku.name]",
                        "capacity": "[parameters('aiModelDeployments')[copyIndex()].sku.capacity]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName'))]"
                      ]
                    },
                    {
                      "condition": "[and(not(empty(parameters('aiProjectName'))), parameters('enableSystemAssignedIdentity'))]",
                      "type": "Microsoft.CognitiveServices/accounts/projects",
                      "apiVersion": "2025-04-01-preview",
                      "name": "[format('{0}/{1}', parameters('aiServicesName'), parameters('aiProjectName'))]",
                      "location": "[parameters('aiLocation')]",
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "properties": {},
                      "tags": "[parameters('tags')]",
                      "dependsOn": [
                        "[resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName'))]"
                      ]
                    },
                    {
                      "condition": "[parameters('enableSystemAssignedIdentity')]",
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('aiServicesName'))]",
                      "name": "[parameters('roleAssignmentName')]",
                      "properties": {
                        "roleDefinitionId": "[parameters('roleDefinitionId')]",
                        "principalId": "[parameters('principalId')]",
                        "principalType": "ServicePrincipal"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName'))]"
                      ]
                    },
                    {
                      "condition": "[not(parameters('enableSystemAssignedIdentity'))]",
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('aiServicesName'))]",
                      "name": "[parameters('roleAssignmentName')]",
                      "properties": {
                        "roleDefinitionId": "[parameters('roleDefinitionId')]",
                        "principalId": "[parameters('principalId')]",
                        "principalType": "ServicePrincipal"
                      }
                    }
                  ],
                  "outputs": {
                    "aiServicesPrincipalId": {
                      "type": "string",
                      "value": "[if(parameters('enableSystemAssignedIdentity'), reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), '2025-04-01-preview', 'full').identity.principalId, reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), '2025-04-01-preview', 'full').identity.principalId)]"
                    },
                    "aiProjectPrincipalId": {
                      "type": "string",
                      "value": "[if(not(empty(parameters('aiProjectName'))), if(parameters('enableSystemAssignedIdentity'), reference(resourceId('Microsoft.CognitiveServices/accounts/projects', parameters('aiServicesName'), parameters('aiProjectName')), '2025-04-01-preview', 'full').identity.principalId, reference(resourceId('Microsoft.CognitiveServices/accounts/projects', parameters('aiServicesName'), parameters('aiProjectName')), '2025-04-01-preview', 'full').identity.principalId), '')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Search/searchServices', variables('aiSearchName'))]"
              ]
            }
          ],
          "outputs": {
            "keyvaultName": {
              "type": "string",
              "metadata": {
                "description": "Contains KeyVault Name"
              },
              "value": "[variables('keyvaultName')]"
            },
            "keyvaultId": {
              "type": "string",
              "metadata": {
                "description": "Contains KeyVault ID"
              },
              "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
            },
            "aiServicesTarget": {
              "type": "string",
              "metadata": {
                "description": "Contains AI Services Target"
              },
              "value": "[if(not(empty(variables('existingOpenAIEndpoint'))), variables('existingOpenAIEndpoint'), reference(resourceId('Microsoft.CognitiveServices/accounts', variables('aiServicesName')), '2025-04-01-preview').endpoints['OpenAI Language Model Instance API'])]"
            },
            "aiServicesName": {
              "type": "string",
              "metadata": {
                "description": "Contains AI Services Name"
              },
              "value": "[if(not(empty(variables('existingAIServicesName'))), variables('existingAIServicesName'), variables('aiServicesName'))]"
            },
            "aiSearchName": {
              "type": "string",
              "metadata": {
                "description": "Contains Search Name"
              },
              "value": "[variables('aiSearchName')]"
            },
            "aiSearchId": {
              "type": "string",
              "metadata": {
                "description": "Contains Search ID"
              },
              "value": "[resourceId('Microsoft.Search/searchServices', variables('aiSearchName'))]"
            },
            "aiSearchTarget": {
              "type": "string",
              "metadata": {
                "description": "Contains AI Search Target"
              },
              "value": "[format('https://{0}.search.windows.net', variables('aiSearchName'))]"
            },
            "aiSearchService": {
              "type": "string",
              "metadata": {
                "description": "Contains AI Search Service Name"
              },
              "value": "[variables('aiSearchName')]"
            },
            "aiProjectName": {
              "type": "string",
              "metadata": {
                "description": "Contains AI Project Name"
              },
              "value": "[if(not(empty(variables('existingAIProjectName'))), variables('existingAIProjectName'), variables('aiProjectName'))]"
            },
            "aiSearchConnectionName": {
              "type": "string",
              "metadata": {
                "description": "Contains AI Search Connection Name"
              },
              "value": "[variables('aiSearchConnectionName')]"
            },
            "applicationInsightsId": {
              "type": "string",
              "metadata": {
                "description": "Contains Application Insights ID"
              },
              "value": "[resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))]"
            },
            "logAnalyticsWorkspaceResourceName": {
              "type": "string",
              "metadata": {
                "description": "Contains LogAnalytics Workspace Resource Name"
              },
              "value": "[if(variables('useExisting'), variables('existingLawName'), variables('workspaceName'))]"
            },
            "logAnalyticsWorkspaceResourceGroup": {
              "type": "string",
              "metadata": {
                "description": "Contains LogAnalytics Workspace Resource Group"
              },
              "value": "[if(variables('useExisting'), variables('existingLawResourceGroup'), resourceGroup().name)]"
            },
            "logAnalyticsWorkspaceSubscription": {
              "type": "string",
              "metadata": {
                "description": "Contains LogAnalytics Workspace Subscription"
              },
              "value": "[if(variables('useExisting'), variables('existingLawSubscription'), subscription().subscriptionId)]"
            },
            "projectEndpoint": {
              "type": "string",
              "metadata": {
                "description": "Contains Project Endpoint"
              },
              "value": "[if(not(empty(variables('existingProjEndpoint'))), variables('existingProjEndpoint'), reference(resourceId('Microsoft.CognitiveServices/accounts/projects', variables('aiServicesName'), variables('aiProjectName')), '2025-04-01-preview').endpoints['AI Foundry API'])]"
            },
            "applicationInsightsConnectionString": {
              "type": "string",
              "metadata": {
                "description": "Contains Application Insights Connection String"
              },
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('applicationInsightsName')), '2020-02-02').ConnectionString]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_keyvault')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy_storage_account",
      "resourceGroup": "[resourceGroup().name]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "saName": {
            "value": "[format('st{0}', variables('solutionSuffix'))]"
          },
          "solutionLocation": {
            "value": "[variables('solutionLocation')]"
          },
          "keyVaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_keyvault'), '2022-09-01').outputs.keyvaultName.value]"
          },
          "managedIdentityObjectId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity'), '2022-09-01').outputs.managedIdentityOutput.value.objectId]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "14295612566408014023"
            }
          },
          "parameters": {
            "solutionLocation": {
              "type": "string",
              "metadata": {
                "description": "Required. Specifies the location for resources."
              }
            },
            "saName": {
              "type": "string",
              "metadata": {
                "description": "Required. Contains Storage Account Name."
              }
            },
            "keyVaultName": {
              "type": "string",
              "metadata": {
                "description": "Required. Contains KeyVault Name."
              }
            },
            "managedIdentityObjectId": {
              "type": "string",
              "metadata": {
                "description": "Required. Contains Managed Identity Object ID."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags to be applied to the resources."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2022-09-01",
              "name": "[parameters('saName')]",
              "location": "[parameters('solutionLocation')]",
              "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
              },
              "kind": "StorageV2",
              "properties": {
                "minimumTlsVersion": "TLS1_2",
                "allowBlobPublicAccess": false,
                "allowSharedKeyAccess": false,
                "isHnsEnabled": true,
                "networkAcls": {
                  "bypass": "AzureServices",
                  "virtualNetworkRules": [],
                  "ipRules": [],
                  "defaultAction": "Allow"
                },
                "supportsHttpsTrafficOnly": true,
                "encryption": {
                  "services": {
                    "file": {
                      "keyType": "Account",
                      "enabled": true
                    },
                    "blob": {
                      "keyType": "Account",
                      "enabled": true
                    }
                  },
                  "keySource": "Microsoft.Storage"
                },
                "accessTier": "Hot"
              },
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.Storage/storageAccounts/blobServices",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}/{1}', parameters('saName'), 'default')]",
              "properties": {
                "cors": {
                  "corsRules": []
                },
                "deleteRetentionPolicy": {
                  "allowPermanentDelete": false,
                  "enabled": false
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('saName'))]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}/{1}/{2}', parameters('saName'), 'default', 'data')]",
              "properties": {
                "defaultEncryptionScope": "$account-encryption-key",
                "denyEncryptionScopeOverride": false,
                "publicAccess": "None"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('saName'), 'default')]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(resourceGroup().id, parameters('managedIdentityObjectId'), resourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe'))]",
              "properties": {
                "principalId": "[parameters('managedIdentityObjectId')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'ADLS-ACCOUNT-NAME')]",
              "properties": {
                "value": "[parameters('saName')]"
              },
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'ADLS-ACCOUNT-CONTAINER')]",
              "properties": {
                "value": "data"
              },
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'ADLS-ACCOUNT-KEY')]",
              "properties": {
                "value": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('saName')), '2021-04-01').keys[0].value]"
              },
              "tags": "[parameters('tags')]",
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('saName'))]"
              ]
            }
          ],
          "outputs": {
            "storageName": {
              "type": "string",
              "metadata": {
                "description": "Contains Storage Name."
              },
              "value": "[parameters('saName')]"
            },
            "storageContainer": {
              "type": "string",
              "metadata": {
                "description": "Contains Storage Container Name."
              },
              "value": "data"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_keyvault')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy_cosmos_db",
      "resourceGroup": "[resourceGroup().name]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "accountName": {
            "value": "[format('cosmos-{0}', variables('solutionSuffix'))]"
          },
          "solutionLocation": {
            "value": "[parameters('secondaryLocation')]"
          },
          "keyVaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_keyvault'), '2022-09-01').outputs.keyvaultName.value]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "11531019343528442541"
            }
          },
          "parameters": {
            "solutionLocation": {
              "type": "string",
              "metadata": {
                "description": "Required. Specifies the location for resources."
              }
            },
            "keyVaultName": {
              "type": "string",
              "metadata": {
                "description": "Required. Contains KeyVault Name"
              }
            },
            "accountName": {
              "type": "string",
              "metadata": {
                "description": "Required. Contains Account Name"
              }
            },
            "kind": {
              "type": "string",
              "defaultValue": "GlobalDocumentDB",
              "allowedValues": [
                "GlobalDocumentDB",
                "MongoDB",
                "Parse"
              ]
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "variables": {
            "databaseName": "db_conversation_history",
            "collectionName": "conversations",
            "containers": [
              {
                "name": "[variables('collectionName')]",
                "id": "[variables('collectionName')]",
                "partitionKey": "/userId"
              }
            ]
          },
          "resources": [
            {
              "copy": {
                "name": "database::list",
                "count": "[length(variables('containers'))]"
              },
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
              "apiVersion": "2022-05-15",
              "name": "[format('{0}/{1}/{2}', split(format('{0}/{1}', parameters('accountName'), variables('databaseName')), '/')[0], split(format('{0}/{1}', parameters('accountName'), variables('databaseName')), '/')[1], variables('containers')[copyIndex()].name)]",
              "properties": {
                "resource": {
                  "id": "[variables('containers')[copyIndex()].id]",
                  "partitionKey": {
                    "paths": [
                      "[variables('containers')[copyIndex()].partitionKey]"
                    ]
                  }
                },
                "options": {}
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', split(format('{0}/{1}', parameters('accountName'), variables('databaseName')), '/')[0], split(format('{0}/{1}', parameters('accountName'), variables('databaseName')), '/')[1])]"
              ]
            },
            {
              "type": "Microsoft.DocumentDB/databaseAccounts",
              "apiVersion": "2022-08-15",
              "name": "[parameters('accountName')]",
              "kind": "[parameters('kind')]",
              "location": "[parameters('solutionLocation')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "consistencyPolicy": {
                  "defaultConsistencyLevel": "Session"
                },
                "locations": [
                  {
                    "locationName": "[parameters('solutionLocation')]",
                    "failoverPriority": 0,
                    "isZoneRedundant": false
                  }
                ],
                "databaseAccountOfferType": "Standard",
                "enableAutomaticFailover": false,
                "enableMultipleWriteLocations": false,
                "disableLocalAuth": true,
                "apiProperties": "[if(equals(parameters('kind'), 'MongoDB'), createObject('serverVersion', '4.0'), createObject())]",
                "capabilities": [
                  {
                    "name": "EnableServerless"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
              "apiVersion": "2022-05-15",
              "name": "[format('{0}/{1}', parameters('accountName'), variables('databaseName'))]",
              "properties": {
                "resource": {
                  "id": "[variables('databaseName')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('accountName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-COSMOSDB-ACCOUNT')]",
              "properties": {
                "value": "[parameters('accountName')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('accountName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-COSMOSDB-ACCOUNT-KEY')]",
              "properties": {
                "value": "[listKeys(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('accountName')), '2022-08-15').primaryMasterKey]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('accountName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-COSMOSDB-DATABASE')]",
              "properties": {
                "value": "[variables('databaseName')]"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-COSMOSDB-CONVERSATIONS-CONTAINER')]",
              "properties": {
                "value": "[variables('collectionName')]"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-COSMOSDB-ENABLE-FEEDBACK')]",
              "properties": {
                "value": "True"
              }
            }
          ],
          "outputs": {
            "cosmosAccountName": {
              "type": "string",
              "metadata": {
                "description": "Contains Cosmos Account Name."
              },
              "value": "[parameters('accountName')]"
            },
            "cosmosDatabaseName": {
              "type": "string",
              "metadata": {
                "description": "Contains Cosmos DB Name."
              },
              "value": "[variables('databaseName')]"
            },
            "cosmosContainerName": {
              "type": "string",
              "metadata": {
                "description": "Contains Cosmos Container Name."
              },
              "value": "[variables('collectionName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_keyvault')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy_sql_db",
      "resourceGroup": "[resourceGroup().name]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "serverName": {
            "value": "[format('sql-{0}', variables('solutionSuffix'))]"
          },
          "sqlDBName": {
            "value": "[format('sqldb-{0}', variables('solutionSuffix'))]"
          },
          "solutionLocation": {
            "value": "[parameters('secondaryLocation')]"
          },
          "keyVaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_keyvault'), '2022-09-01').outputs.keyvaultName.value]"
          },
          "managedIdentityName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity'), '2022-09-01').outputs.managedIdentityOutput.value.name]"
          },
          "sqlUsers": {
            "value": [
              {
                "principalId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity'), '2022-09-01').outputs.managedIdentityBackendAppOutput.value.clientId]",
                "principalName": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity'), '2022-09-01').outputs.managedIdentityBackendAppOutput.value.name]",
                "databaseRoles": [
                  "db_datareader",
                  "db_datawriter"
                ]
              }
            ]
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "3976073891727676595"
            }
          },
          "parameters": {
            "solutionLocation": {
              "type": "string",
              "metadata": {
                "description": "Required. Specifies the location for resources."
              }
            },
            "keyVaultName": {
              "type": "string",
              "metadata": {
                "description": "Required. Contains KeyVault Name."
              }
            },
            "managedIdentityName": {
              "type": "string",
              "metadata": {
                "description": "Required. Contains Managed Identity Name."
              }
            },
            "serverName": {
              "type": "string",
              "metadata": {
                "description": "Required. Contains Server Name."
              }
            },
            "sqlDBName": {
              "type": "string",
              "metadata": {
                "description": "Required. Contains SQL DB Name."
              }
            },
            "sqlUsers": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Required. List of SQL Users."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags to be applied to the resources."
              }
            }
          },
          "variables": {
            "location": "[parameters('solutionLocation')]"
          },
          "resources": [
            {
              "type": "Microsoft.Sql/servers",
              "apiVersion": "2023-08-01-preview",
              "name": "[parameters('serverName')]",
              "location": "[variables('location')]",
              "kind": "v12.0",
              "properties": {
                "publicNetworkAccess": "Enabled",
                "version": "12.0",
                "restrictOutboundNetworkAccess": "Disabled",
                "minimalTlsVersion": "1.2",
                "administrators": {
                  "login": "[parameters('managedIdentityName')]",
                  "sid": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2023-01-31').principalId]",
                  "tenantId": "[subscription().tenantId]",
                  "administratorType": "ActiveDirectory",
                  "azureADOnlyAuthentication": true
                }
              },
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.Sql/servers/firewallRules",
              "apiVersion": "2023-08-01-preview",
              "name": "[format('{0}/{1}', parameters('serverName'), 'AllowSpecificRange')]",
              "properties": {
                "startIpAddress": "0.0.0.0",
                "endIpAddress": "255.255.255.255"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('serverName'))]"
              ]
            },
            {
              "type": "Microsoft.Sql/servers/firewallRules",
              "apiVersion": "2023-08-01-preview",
              "name": "[format('{0}/{1}', parameters('serverName'), 'AllowAllWindowsAzureIps')]",
              "properties": {
                "startIpAddress": "0.0.0.0",
                "endIpAddress": "0.0.0.0"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('serverName'))]"
              ]
            },
            {
              "type": "Microsoft.Sql/servers/databases",
              "apiVersion": "2023-08-01-preview",
              "name": "[format('{0}/{1}', parameters('serverName'), parameters('sqlDBName'))]",
              "location": "[variables('location')]",
              "sku": {
                "name": "GP_S_Gen5",
                "tier": "GeneralPurpose",
                "family": "Gen5",
                "capacity": 2
              },
              "kind": "v12.0,user,vcore,serverless",
              "properties": {
                "collation": "SQL_Latin1_General_CP1_CI_AS",
                "autoPauseDelay": 60,
                "minCapacity": 1,
                "readScale": "Disabled",
                "zoneRedundant": false
              },
              "tags": "[parameters('tags')]",
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('serverName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'SQLDB-SERVER')]",
              "properties": {
                "value": "[format('{0}{1}', parameters('serverName'), environment().suffixes.sqlServerHostname)]"
              },
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'SQLDB-DATABASE')]",
              "properties": {
                "value": "[parameters('sqlDBName')]"
              },
              "tags": "[parameters('tags')]"
            },
            {
              "copy": {
                "name": "sqluser",
                "count": "[length(parameters('sqlUsers'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('sqluser-{0}', guid(parameters('solutionLocation'), parameters('sqlUsers')[copyIndex()].principalId, parameters('sqlUsers')[copyIndex()].principalName, parameters('sqlDBName'), parameters('serverName')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "managedIdentityName": {
                    "value": "[parameters('managedIdentityName')]"
                  },
                  "location": {
                    "value": "[parameters('solutionLocation')]"
                  },
                  "sqlDatabaseName": {
                    "value": "[parameters('sqlDBName')]"
                  },
                  "sqlServerName": {
                    "value": "[parameters('serverName')]"
                  },
                  "principalId": {
                    "value": "[parameters('sqlUsers')[copyIndex()].principalId]"
                  },
                  "principalName": {
                    "value": "[parameters('sqlUsers')[copyIndex()].principalName]"
                  },
                  "databaseRoles": {
                    "value": "[parameters('sqlUsers')[copyIndex()].databaseRoles]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "16909144359839991802"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The Azure region for the resource."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Required. The tags to associate with this resource."
                      }
                    },
                    "databaseRoles": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "defaultValue": [
                        "db_datareader"
                      ],
                      "metadata": {
                        "description": "Required. The database roles to assign to the user."
                      }
                    },
                    "managedIdentityName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the User Assigned Managed Identity to be used."
                      }
                    },
                    "principalId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The principal (or object) ID of the user to create."
                      }
                    },
                    "principalName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the user to create."
                      }
                    },
                    "sqlDatabaseName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the SQL Database resource."
                      }
                    },
                    "sqlServerName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the SQL Server resource."
                      }
                    },
                    "uniqueScriptId": {
                      "type": "string",
                      "defaultValue": "[newGuid()]",
                      "metadata": {
                        "description": "Do not set - unique script ID to force the script to run."
                      }
                    }
                  },
                  "variables": {
                    "$fxv#0": "#Requires -Version 7.2\r\n\r\n<#\r\n.SYNOPSIS\r\n    Creates a SQL user and assigns the user account to one or more roles.\r\n\r\n.DESCRIPTION\r\n    During an application deployment, the managed identity (and potentially the developer identity)\r\n    must be added to the SQL database as a user and assigned to one or more roles. This script\r\n    accomplishes this task using the owner-managed identity for authentication.\r\n\r\n.PARAMETER SqlServerName\r\n    The name of the Azure SQL Server resource.\r\n\r\n.PARAMETER SqlDatabaseName\r\n    The name of the Azure SQL Database where the user will be created.\r\n\r\n.PARAMETER ClientId\r\n    The Client (Principal) ID (GUID) of the identity to be added.\r\n\r\n.PARAMETER DisplayName\r\n    The Object (Principal) display name of the identity to be added.\r\n\r\n.PARAMETER DatabaseRoles\r\n    A comma-separated string of database roles to assign (e.g., 'db_datareader,db_datawriter')\r\n#>\r\n\r\nParam(\r\n    [string] $SqlServerName,\r\n    [string] $SqlDatabaseName,\r\n    [string] $ClientId,\r\n    [string] $DisplayName,\r\n    [string] $DatabaseRoles\r\n)\r\n\r\n# Using specific version of SqlServer module to avoid issues with newer versions\r\n$SqlServerModuleVersion = \"22.3.0\"\r\n\r\nfunction Resolve-Module($moduleName) {\r\n    # If module is imported; say that and do nothing\r\n    if (Get-Module | Where-Object { $_.Name -eq $moduleName }) {\r\n        Write-Debug \"Module $moduleName is already imported\"\r\n    } elseif (Get-Module -ListAvailable | Where-Object { $_.Name -eq $moduleName }) {\r\n        Import-Module $moduleName\r\n    } elseif (Find-Module -Name $moduleName | Where-Object { $_.Name -eq $moduleName }) {\r\n        # Use specific version for SqlServer\r\n        if ($moduleName -eq \"SqlServer\") {\r\n            Install-Module -Name $moduleName -RequiredVersion $SqlServerModuleVersion -Force -Scope CurrentUser\r\n        } else {\r\n            Install-Module -Name $moduleName -Force\r\n        }\r\n        Import-Module $moduleName\r\n    } else {\r\n        Write-Error \"Module $moduleName not found\"\r\n        [Environment]::exit(1)\r\n    }\r\n}\r\n\r\n###\r\n### MAIN SCRIPT\r\n###\r\nResolve-Module -moduleName Az.Resources\r\nResolve-Module -moduleName SqlServer\r\n\r\n# Split comma-separated roles into an array\r\n$roleArray = $DatabaseRoles -split ','\r\n\r\n$roleSql = \"\"\r\nforeach ($role in $roleArray) {\r\n    $trimmedRole = $role.Trim()\r\n    $roleSql += \"EXEC sp_addrolemember N'$trimmedRole', N'$DisplayName';`n\"\r\n}\r\n\r\n$sql = @\"\r\nDECLARE @username nvarchar(max) = N'$($DisplayName)';\r\nDECLARE @clientId uniqueidentifier = '$($ClientId)';\r\nDECLARE @sid NVARCHAR(max) = CONVERT(VARCHAR(max), CONVERT(VARBINARY(16), @clientId), 1);\r\nDECLARE @cmd NVARCHAR(max) = N'CREATE USER [' + @username + '] WITH SID = ' + @sid + ', TYPE = E;';\r\nIF NOT EXISTS (SELECT * FROM sys.database_principals WHERE name = @username)\r\nBEGIN\r\n    EXEC(@cmd)\r\nEND\r\n$($roleSql)\r\n\"@\r\n\r\nWrite-Output \"`nSQL:`n$($sql)`n`n\"\r\n\r\n$token = (Get-AzAccessToken -AsSecureString -ResourceUrl https://database.windows.net/).Token\r\n$ssPtr = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($token)\r\ntry {\r\n    $serverInstance = if ($SqlServerName -like \"*.database.windows.net\") {  \r\n        $SqlServerName  \r\n    } else {  \r\n        \"$SqlServerName.database.windows.net\"  \r\n    }\r\n    $plaintext = [System.Runtime.InteropServices.Marshal]::PtrToStringBSTR($ssPtr)\r\n    Invoke-Sqlcmd -ServerInstance $serverInstance -Database $SqlDatabaseName -AccessToken $plaintext -Query $sql -ErrorAction 'Stop'\r\n} finally {\r\n    # The following line ensures that sensitive data is not left in memory.\r\n    $plainText = [System.Runtime.InteropServices.Marshal]::ZeroFreeBSTR($ssPtr)\r\n}"
                  },
                  "resources": {
                    "managedIdentity": {
                      "existing": true,
                      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                      "apiVersion": "2023-01-31",
                      "name": "[parameters('managedIdentityName')]"
                    },
                    "createSqlUserAndRole": {
                      "type": "Microsoft.Resources/deploymentScripts",
                      "apiVersion": "2023-08-01",
                      "name": "[format('sqlUserRole-{0}', guid(parameters('principalId'), parameters('sqlServerName'), parameters('sqlDatabaseName')))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "kind": "AzurePowerShell",
                      "identity": {
                        "type": "UserAssigned",
                        "userAssignedIdentities": {
                          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')))]": {}
                        }
                      },
                      "properties": {
                        "forceUpdateTag": "[parameters('uniqueScriptId')]",
                        "azPowerShellVersion": "11.0",
                        "retentionInterval": "PT1H",
                        "cleanupPreference": "OnSuccess",
                        "arguments": "[join(createArray(format('-SqlServerName ''{0}''', parameters('sqlServerName')), format('-SqlDatabaseName ''{0}''', parameters('sqlDatabaseName')), format('-ClientId ''{0}''', parameters('principalId')), format('-DisplayName ''{0}''', parameters('principalName')), format('-DatabaseRoles ''{0}''', join(parameters('databaseRoles'), ','))), ' ')]",
                        "scriptContent": "[variables('$fxv#0')]"
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers/databases', parameters('serverName'), parameters('sqlDBName'))]",
                "[resourceId('Microsoft.Sql/servers', parameters('serverName'))]"
              ]
            }
          ],
          "outputs": {
            "sqlServerName": {
              "type": "string",
              "metadata": {
                "description": "Contains SQL Server Name."
              },
              "value": "[format('{0}.database.windows.net', parameters('serverName'))]"
            },
            "sqlDbName": {
              "type": "string",
              "metadata": {
                "description": "Contains SQL DB Name."
              },
              "value": "[parameters('sqlDBName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_keyvault')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy_upload_files_script",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "solutionLocation": {
            "value": "[parameters('secondaryLocation')]"
          },
          "baseUrl": {
            "value": "[variables('baseUrl')]"
          },
          "storageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_storage_account'), '2022-09-01').outputs.storageName.value]"
          },
          "containerName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_storage_account'), '2022-09-01').outputs.storageContainer.value]"
          },
          "managedIdentityResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity'), '2022-09-01').outputs.managedIdentityOutput.value.id]"
          },
          "managedIdentityClientId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity'), '2022-09-01').outputs.managedIdentityOutput.value.clientId]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "9316842383729763930"
            }
          },
          "parameters": {
            "solutionLocation": {
              "type": "string",
              "metadata": {
                "description": "Required. Specifies the location for resources."
              }
            },
            "baseUrl": {
              "type": "string",
              "metadata": {
                "description": "Required. Contains Base URL."
              }
            },
            "managedIdentityResourceId": {
              "type": "string",
              "metadata": {
                "description": "Required. Contains Managed Identity Resource ID."
              }
            },
            "managedIdentityClientId": {
              "type": "string",
              "metadata": {
                "description": "Required. Contains Managed Identity Client ID."
              }
            },
            "storageAccountName": {
              "type": "string",
              "metadata": {
                "description": "Required. Contains Storage Account Name."
              }
            },
            "containerName": {
              "type": "string",
              "metadata": {
                "description": "Required. Contains COntainer Name."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deploymentScripts",
              "apiVersion": "2023-08-01",
              "name": "copy_demo_Data",
              "kind": "AzureCLI",
              "location": "[parameters('solutionLocation')]",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', parameters('managedIdentityResourceId'))]": {}
                }
              },
              "properties": {
                "azCliVersion": "2.52.0",
                "primaryScriptUri": "[format('{0}infra/scripts/copy_kb_files.sh', parameters('baseUrl'))]",
                "arguments": "[format('{0} {1} {2} {3}', parameters('storageAccountName'), parameters('containerName'), parameters('baseUrl'), parameters('managedIdentityClientId'))]",
                "timeout": "PT1H",
                "retentionInterval": "PT1H",
                "cleanupPreference": "OnSuccess"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_storage_account')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy_index_scripts",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "solutionLocation": {
            "value": "[parameters('secondaryLocation')]"
          },
          "managedIdentityResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity'), '2022-09-01').outputs.managedIdentityOutput.value.id]"
          },
          "managedIdentityClientId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity'), '2022-09-01').outputs.managedIdentityOutput.value.clientId]"
          },
          "baseUrl": {
            "value": "[variables('baseUrl')]"
          },
          "keyVaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.keyvaultName.value]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "349787848068496439"
            }
          },
          "parameters": {
            "solutionLocation": {
              "type": "string",
              "metadata": {
                "description": "Required. Specifies the location for resources."
              }
            },
            "baseUrl": {
              "type": "string",
              "metadata": {
                "description": "Required. Contains the Base URL."
              }
            },
            "keyVaultName": {
              "type": "string",
              "metadata": {
                "description": "Required. Contains KeyVault Name."
              }
            },
            "managedIdentityResourceId": {
              "type": "string",
              "metadata": {
                "description": "Required. Contains ID of ManagedIdentity."
              }
            },
            "managedIdentityClientId": {
              "type": "string",
              "metadata": {
                "description": "Required. Contains Managed Identity Client ID."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags to be applied to the resources."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deploymentScripts",
              "apiVersion": "2023-08-01",
              "name": "create_search_indexes",
              "kind": "AzureCLI",
              "location": "[parameters('solutionLocation')]",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', parameters('managedIdentityResourceId'))]": {}
                }
              },
              "properties": {
                "azCliVersion": "2.52.0",
                "primaryScriptUri": "[format('{0}infra/scripts/run_create_index_scripts.sh', parameters('baseUrl'))]",
                "arguments": "[format('{0} {1} {2}', parameters('baseUrl'), parameters('keyVaultName'), parameters('managedIdentityClientId'))]",
                "timeout": "PT1H",
                "retentionInterval": "PT1H",
                "cleanupPreference": "OnSuccess"
              },
              "tags": "[parameters('tags')]"
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_sql_db')]",
        "[resourceId('Microsoft.Resources/deployments', 'deploy_upload_files_script')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy_app_service_plan",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "solutionLocation": {
            "value": "[variables('solutionLocation')]"
          },
          "HostingPlanName": {
            "value": "[format('asp-{0}', variables('solutionSuffix'))]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "15528947499514547087"
            },
            "description": "Creates an Azure App Service plan."
          },
          "parameters": {
            "solutionLocation": {
              "type": "string",
              "metadata": {
                "description": "Required. Specifies the location for resources."
              }
            },
            "HostingPlanName": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of App Service plan."
              }
            },
            "HostingPlanSku": {
              "type": "string",
              "defaultValue": "B2",
              "allowedValues": [
                "F1",
                "D1",
                "B1",
                "B2",
                "B3",
                "S1",
                "S2",
                "S3",
                "P1",
                "P2",
                "P3",
                "P4",
                "P0v3"
              ],
              "metadata": {
                "description": "Required. The pricing tier for the App Service plan."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags to be applied to the resources."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Web/serverfarms",
              "apiVersion": "2020-06-01",
              "name": "[parameters('HostingPlanName')]",
              "location": "[parameters('solutionLocation')]",
              "sku": {
                "name": "[parameters('HostingPlanSku')]"
              },
              "properties": {
                "reserved": true
              },
              "kind": "linux",
              "tags": "[parameters('tags')]"
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "metadata": {
                "description": "Contains Hosting Plan ID."
              },
              "value": "[resourceId('Microsoft.Web/serverfarms', parameters('HostingPlanName'))]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Contains Hosting Plan Name."
              },
              "value": "[parameters('HostingPlanName')]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy_backend_docker",
      "resourceGroup": "[resourceGroup().name]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('api-{0}', variables('solutionSuffix'))]"
          },
          "solutionLocation": {
            "value": "[variables('solutionLocation')]"
          },
          "imageTag": {
            "value": "[parameters('imageTag')]"
          },
          "acrName": {
            "value": "[variables('acrName')]"
          },
          "appServicePlanId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'deploy_app_service_plan'), '2022-09-01').outputs.name.value]"
          },
          "applicationInsightsId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.applicationInsightsId.value]"
          },
          "userassignedIdentityId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity'), '2022-09-01').outputs.managedIdentityBackendAppOutput.value.id]"
          },
          "keyVaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_keyvault'), '2022-09-01').outputs.keyvaultName.value]"
          },
          "aiServicesName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.aiServicesName.value]"
          },
          "azureExistingAIProjectResourceId": {
            "value": "[parameters('azureExistingAIProjectResourceId')]"
          },
          "aiSearchName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.aiSearchName.value]"
          },
          "appSettings": {
            "value": {
              "AZURE_OPENAI_DEPLOYMENT_MODEL": "[parameters('gptModelName')]",
              "AZURE_OPENAI_ENDPOINT": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.aiServicesTarget.value]",
              "AZURE_OPENAI_API_VERSION": "[parameters('azureOpenAIApiVersion')]",
              "AZURE_OPENAI_RESOURCE": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.aiServicesName.value]",
              "AZURE_AI_AGENT_ENDPOINT": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.projectEndpoint.value]",
              "AZURE_AI_AGENT_API_VERSION": "[parameters('azureAiAgentApiVersion')]",
              "AZURE_AI_AGENT_MODEL_DEPLOYMENT_NAME": "[parameters('gptModelName')]",
              "USE_CHAT_HISTORY_ENABLED": "True",
              "AZURE_COSMOSDB_ACCOUNT": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_cosmos_db'), '2022-09-01').outputs.cosmosAccountName.value]",
              "AZURE_COSMOSDB_CONVERSATIONS_CONTAINER": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_cosmos_db'), '2022-09-01').outputs.cosmosContainerName.value]",
              "AZURE_COSMOSDB_DATABASE": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_cosmos_db'), '2022-09-01').outputs.cosmosDatabaseName.value]",
              "AZURE_COSMOSDB_ENABLE_FEEDBACK": "True",
              "SQLDB_DATABASE": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_sql_db'), '2022-09-01').outputs.sqlDbName.value]",
              "SQLDB_SERVER": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_sql_db'), '2022-09-01').outputs.sqlServerName.value]",
              "SQLDB_USER_MID": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity'), '2022-09-01').outputs.managedIdentityBackendAppOutput.value.clientId]",
              "AZURE_AI_SEARCH_ENDPOINT": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.aiSearchTarget.value]",
              "AZURE_AI_SEARCH_INDEX": "call_transcripts_index",
              "AZURE_AI_SEARCH_CONNECTION_NAME": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.aiSearchConnectionName.value]",
              "USE_AI_PROJECT_CLIENT": "True",
              "DISPLAY_CHART_DEFAULT": "False",
              "APPLICATIONINSIGHTS_CONNECTION_STRING": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.applicationInsightsConnectionString.value]",
              "DUMMY_TEST": "True",
              "SOLUTION_NAME": "[variables('solutionSuffix')]",
              "APP_ENV": "Prod"
            }
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "5849646822810829341"
            }
          },
          "parameters": {
            "imageTag": {
              "type": "string",
              "metadata": {
                "description": "Required. Contains the Image Tag."
              }
            },
            "acrName": {
              "type": "string",
              "metadata": {
                "description": "Required. Contains ACR Name."
              }
            },
            "applicationInsightsId": {
              "type": "string",
              "metadata": {
                "description": "Required. Contains Application Insights ID."
              }
            },
            "solutionLocation": {
              "type": "string",
              "metadata": {
                "description": "Required. Contains Solution Location."
              }
            },
            "appSettings": {
              "type": "secureObject",
              "defaultValue": {},
              "metadata": {
                "description": "Required. Contains App Settings."
              }
            },
            "appServicePlanId": {
              "type": "string",
              "metadata": {
                "description": "Required. Contains App Service Plan ID."
              }
            },
            "userassignedIdentityId": {
              "type": "string",
              "metadata": {
                "description": "Required. Contains User Assigned Identity ID."
              }
            },
            "keyVaultName": {
              "type": "string",
              "metadata": {
                "description": "Required. Contains KeyVault Name."
              }
            },
            "aiServicesName": {
              "type": "string",
              "metadata": {
                "description": "Required. Contains AI Services Name."
              }
            },
            "azureExistingAIProjectResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Required. Contains Existing AI Project Resource ID."
              }
            },
            "aiSearchName": {
              "type": "string",
              "metadata": {
                "description": "Required. Contains AI Search Name"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags to be applied to the resources."
              }
            },
            "name": {
              "type": "string"
            }
          },
          "variables": {
            "existingAIServiceSubscription": "[if(not(empty(parameters('azureExistingAIProjectResourceId'))), split(parameters('azureExistingAIProjectResourceId'), '/')[2], subscription().subscriptionId)]",
            "existingAIServiceResourceGroup": "[if(not(empty(parameters('azureExistingAIProjectResourceId'))), split(parameters('azureExistingAIProjectResourceId'), '/')[4], resourceGroup().name)]",
            "existingAIServicesName": "[if(not(empty(parameters('azureExistingAIProjectResourceId'))), split(parameters('azureExistingAIProjectResourceId'), '/')[8], '')]",
            "existingAIProjectName": "[if(not(empty(parameters('azureExistingAIProjectResourceId'))), split(parameters('azureExistingAIProjectResourceId'), '/')[10], '')]",
            "imageName": "[format('DOCKER|{0}.azurecr.io/km-api:{1}', parameters('acrName'), parameters('imageTag'))]",
            "reactAppLayoutConfig": "{\r\n  \"appConfig\": {\r\n    \"THREE_COLUMN\": {\r\n      \"DASHBOARD\": 50,\r\n      \"CHAT\": 33,\r\n      \"CHATHISTORY\": 17\r\n    },\r\n    \"TWO_COLUMN\": {\r\n      \"DASHBOARD_CHAT\": {\r\n        \"DASHBOARD\": 65,\r\n        \"CHAT\": 35\r\n      },\r\n      \"CHAT_CHATHISTORY\": {\r\n        \"CHAT\": 80,\r\n        \"CHATHISTORY\": 20\r\n      }\r\n    }\r\n  },\r\n  \"charts\": [\r\n    {\r\n      \"id\": \"SATISFIED\",\r\n      \"name\": \"Satisfied\",\r\n      \"type\": \"card\",\r\n      \"layout\": { \"row\": 1, \"column\": 1, \"height\": 11 }\r\n    },\r\n    {\r\n      \"id\": \"TOTAL_CALLS\",\r\n      \"name\": \"Total Calls\",\r\n      \"type\": \"card\",\r\n      \"layout\": { \"row\": 1, \"column\": 2, \"span\": 1 }\r\n    },\r\n    {\r\n      \"id\": \"AVG_HANDLING_TIME\",\r\n      \"name\": \"Average Handling Time\",\r\n      \"type\": \"card\",\r\n      \"layout\": { \"row\": 1, \"column\": 3, \"span\": 1 }\r\n    },\r\n    {\r\n      \"id\": \"SENTIMENT\",\r\n      \"name\": \"Topics Overview\",\r\n      \"type\": \"donutchart\",\r\n      \"layout\": { \"row\": 2, \"column\": 1, \"width\": 40, \"height\": 44.5 }\r\n    },\r\n    {\r\n      \"id\": \"AVG_HANDLING_TIME_BY_TOPIC\",\r\n      \"name\": \"Average Handling Time By Topic\",\r\n      \"type\": \"bar\",\r\n      \"layout\": { \"row\": 2, \"column\": 2, \"row-span\": 2, \"width\": 60 }\r\n    },\r\n    {\r\n      \"id\": \"TOPICS\",\r\n      \"name\": \"Trending Topics\",\r\n      \"type\": \"table\",\r\n      \"layout\": { \"row\": 3, \"column\": 1, \"span\": 2 }\r\n    },\r\n    {\r\n      \"id\": \"KEY_PHRASES\",\r\n      \"name\": \"Key Phrases\",\r\n      \"type\": \"wordcloud\",\r\n      \"layout\": { \"row\": 3, \"column\": 2, \"height\": 44.5 }\r\n    }\r\n  ]\r\n}"
          },
          "resources": [
            {
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlRoleAssignments",
              "apiVersion": "2022-05-15",
              "name": "[format('{0}/{1}', parameters('appSettings').AZURE_COSMOSDB_ACCOUNT, guid(resourceId('Microsoft.DocumentDB/databaseAccounts/sqlRoleDefinitions', parameters('appSettings').AZURE_COSMOSDB_ACCOUNT, '00000000-0000-0000-0000-000000000002'), resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('appSettings').AZURE_COSMOSDB_ACCOUNT)))]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-app-module', parameters('name'))), '2022-09-01').outputs.identityPrincipalId.value]",
                "roleDefinitionId": "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlRoleDefinitions', parameters('appSettings').AZURE_COSMOSDB_ACCOUNT, '00000000-0000-0000-0000-000000000002')]",
                "scope": "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('appSettings').AZURE_COSMOSDB_ACCOUNT)]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('{0}-app-module', parameters('name')))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
              "name": "[guid(format('{0}-app-module', parameters('name')), parameters('keyVaultName'), resourceId('Microsoft.Authorization/roleDefinitions', '4633458b-17de-408a-b874-0445c86b69e6'))]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '4633458b-17de-408a-b874-0445c86b69e6')]",
                "principalId": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-app-module', parameters('name'))), '2022-09-01').outputs.identityPrincipalId.value]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('{0}-app-module', parameters('name')))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', parameters('aiSearchName'))]",
              "name": "[guid(format('{0}-app-module', parameters('name')), parameters('aiSearchName'), resourceId('Microsoft.Authorization/roleDefinitions', '1407120a-92aa-4202-b7e9-c0e197c71c8f'))]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '1407120a-92aa-4202-b7e9-c0e197c71c8f')]",
                "principalId": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-app-module', parameters('name'))), '2022-09-01').outputs.identityPrincipalId.value]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('{0}-app-module', parameters('name')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-app-module', parameters('name'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "solutionName": {
                    "value": "[parameters('name')]"
                  },
                  "solutionLocation": {
                    "value": "[parameters('solutionLocation')]"
                  },
                  "appServicePlanId": {
                    "value": "[parameters('appServicePlanId')]"
                  },
                  "appImageName": {
                    "value": "[variables('imageName')]"
                  },
                  "userassignedIdentityId": {
                    "value": "[parameters('userassignedIdentityId')]"
                  },
                  "appSettings": {
                    "value": "[union(parameters('appSettings'), createObject('APPINSIGHTS_INSTRUMENTATIONKEY', reference(parameters('applicationInsightsId'), '2015-05-01').InstrumentationKey, 'REACT_APP_LAYOUT_CONFIG', variables('reactAppLayoutConfig')))]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "17413180076880991152"
                    }
                  },
                  "parameters": {
                    "solutionName": {
                      "type": "string",
                      "minLength": 3,
                      "maxLength": 16,
                      "metadata": {
                        "description": "Required. Contains Solution Name."
                      }
                    },
                    "solutionLocation": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the location for resources."
                      }
                    },
                    "appSettings": {
                      "type": "secureObject",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Required. Contains App Settings."
                      }
                    },
                    "appServicePlanId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Contains App Service Plan ID."
                      }
                    },
                    "appImageName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Contains App Image Name."
                      }
                    },
                    "userassignedIdentityId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Contains User Assigned Identity ID."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags to be applied to the resources."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Web/sites/basicPublishingCredentialsPolicies",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('solutionName'), 'ftp')]",
                      "properties": {
                        "allow": false
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', parameters('solutionName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Web/sites/basicPublishingCredentialsPolicies",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('solutionName'), 'scm')]",
                      "properties": {
                        "allow": false
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', parameters('solutionName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Web/sites",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('solutionName')]",
                      "location": "[parameters('solutionLocation')]",
                      "tags": "[parameters('tags')]",
                      "identity": "[if(equals(parameters('userassignedIdentityId'), ''), createObject('type', 'SystemAssigned'), createObject('type', 'SystemAssigned, UserAssigned', 'userAssignedIdentities', createObject(format('{0}', parameters('userassignedIdentityId')), createObject())))]",
                      "properties": {
                        "serverFarmId": "[parameters('appServicePlanId')]",
                        "siteConfig": {
                          "alwaysOn": true,
                          "ftpsState": "Disabled",
                          "linuxFxVersion": "[parameters('appImageName')]"
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Web/sites/config",
                      "apiVersion": "2022-03-01",
                      "name": "[format('{0}/{1}', parameters('solutionName'), 'logs')]",
                      "properties": {
                        "applicationLogs": {
                          "fileSystem": {
                            "level": "Verbose"
                          }
                        },
                        "detailedErrorMessages": {
                          "enabled": true
                        },
                        "failedRequestsTracing": {
                          "enabled": true
                        },
                        "httpLogs": {
                          "fileSystem": {
                            "enabled": true,
                            "retentionInDays": 1,
                            "retentionInMb": 35
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', parameters('solutionName'))]",
                        "[resourceId('Microsoft.Resources/deployments', format('{0}-appSettings', parameters('solutionName')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-appSettings', parameters('solutionName'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('solutionName')]"
                          },
                          "appSettings": {
                            "value": "[parameters('appSettings')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.37.4.10188",
                              "templateHash": "17012486924716292048"
                            },
                            "description": "Updates app settings for an Azure App Service."
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the app service resource within the current resource group scope"
                              }
                            },
                            "appSettings": {
                              "type": "secureObject",
                              "metadata": {
                                "description": "Required. The app settings to be applied to the app service"
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Web/sites/config",
                              "apiVersion": "2022-03-01",
                              "name": "[format('{0}/{1}', parameters('name'), 'appsettings')]",
                              "properties": "[parameters('appSettings')]"
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', parameters('solutionName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "identityPrincipalId": {
                      "type": "string",
                      "metadata": {
                        "description": "Contains Identity Principle ID."
                      },
                      "value": "[reference(resourceId('Microsoft.Web/sites', parameters('solutionName')), '2020-06-01', 'full').identity.principalId]"
                    },
                    "appUrl": {
                      "type": "string",
                      "metadata": {
                        "description": "Contains App URL."
                      },
                      "value": "[format('https://{0}.azurewebsites.net', parameters('solutionName'))]"
                    }
                  }
                }
              }
            },
            {
              "condition": "[not(empty(parameters('azureExistingAIProjectResourceId')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "existing_foundry_project",
              "subscriptionId": "[variables('existingAIServiceSubscription')]",
              "resourceGroup": "[variables('existingAIServiceResourceGroup')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "aiServicesName": {
                    "value": "[variables('existingAIServicesName')]"
                  },
                  "aiProjectName": {
                    "value": "[variables('existingAIProjectName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "1956530086715880237"
                    }
                  },
                  "parameters": {
                    "aiServicesName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the existing Azure AI Services account"
                      }
                    },
                    "aiProjectName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the existing AI Project under the AI Services account"
                      }
                    }
                  },
                  "resources": [],
                  "outputs": {
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Contains Service Location."
                      },
                      "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), '2025-04-01-preview', 'full').location]"
                    },
                    "skuName": {
                      "type": "string",
                      "metadata": {
                        "description": "Contains SKU Name."
                      },
                      "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), '2025-04-01-preview', 'full').sku.name]"
                    },
                    "kind": {
                      "type": "string",
                      "metadata": {
                        "description": "Contains Kind of Service."
                      },
                      "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), '2025-04-01-preview', 'full').kind]"
                    },
                    "allowProjectManagement": {
                      "type": "bool",
                      "metadata": {
                        "description": "Specifies whether to Enable or Disable Project Management."
                      },
                      "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), '2025-04-01-preview').allowProjectManagement]"
                    },
                    "customSubDomainName": {
                      "type": "string",
                      "metadata": {
                        "description": "Contains Custom Sub Domain Name."
                      },
                      "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), '2025-04-01-preview').customSubDomainName]"
                    },
                    "publicNetworkAccess": {
                      "type": "string",
                      "metadata": {
                        "description": "Contains Properties of Public Network Access."
                      },
                      "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), '2025-04-01-preview').publicNetworkAccess]"
                    },
                    "defaultNetworkAction": {
                      "type": "string",
                      "metadata": {
                        "description": "Contains Default Network Action."
                      },
                      "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), '2025-04-01-preview').networkAcls.defaultAction]"
                    },
                    "ipRules": {
                      "type": "array",
                      "metadata": {
                        "description": "Contains the IP Rules."
                      },
                      "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), '2025-04-01-preview').networkAcls.ipRules]"
                    },
                    "vnetRules": {
                      "type": "array",
                      "metadata": {
                        "description": "Contains VNET Rules."
                      },
                      "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), '2025-04-01-preview').networkAcls.virtualNetworkRules]"
                    },
                    "projectLocation": {
                      "type": "string",
                      "metadata": {
                        "description": "Contains Location of Project."
                      },
                      "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts/projects', parameters('aiServicesName'), parameters('aiProjectName')), '2025-04-01-preview', 'full').location]"
                    },
                    "projectKind": {
                      "type": "string",
                      "metadata": {
                        "description": "Contains Kind of Project."
                      },
                      "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts/projects', parameters('aiServicesName'), parameters('aiProjectName')), '2025-04-01-preview', 'full').kind]"
                    },
                    "projectProvisioningState": {
                      "type": "string",
                      "metadata": {
                        "description": "Contains Project Provisioning State."
                      },
                      "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts/projects', parameters('aiServicesName'), parameters('aiProjectName')), '2025-04-01-preview').provisioningState]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "assignAiUserRoleToAiProject",
              "subscriptionId": "[variables('existingAIServiceSubscription')]",
              "resourceGroup": "[variables('existingAIServiceResourceGroup')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "principalId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-app-module', parameters('name'))), '2022-09-01').outputs.identityPrincipalId.value]"
                  },
                  "roleDefinitionId": {
                    "value": "[resourceId('Microsoft.Authorization/roleDefinitions', '53ca6127-db72-4b80-b1b0-d745d6d5456d')]"
                  },
                  "roleAssignmentName": {
                    "value": "[guid(format('{0}-app-module', parameters('name')), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('existingAIServiceSubscription'), variables('existingAIServiceResourceGroup')), 'Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), resourceId('Microsoft.Authorization/roleDefinitions', '53ca6127-db72-4b80-b1b0-d745d6d5456d'))]"
                  },
                  "aiServicesName": "[if(not(empty(parameters('azureExistingAIProjectResourceId'))), createObject('value', variables('existingAIServicesName')), createObject('value', parameters('aiServicesName')))]",
                  "aiProjectName": "[if(not(empty(parameters('azureExistingAIProjectResourceId'))), createObject('value', split(parameters('azureExistingAIProjectResourceId'), '/')[10]), createObject('value', ''))]",
                  "enableSystemAssignedIdentity": {
                    "value": false
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "8648115976263226848"
                    }
                  },
                  "parameters": {
                    "principalId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Contains Principle ID."
                      }
                    },
                    "roleDefinitionId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Contains Role Definition ID."
                      }
                    },
                    "roleAssignmentName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Contains Role Assignment Name."
                      }
                    },
                    "aiServicesName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Contains AI Services Name."
                      }
                    },
                    "aiProjectName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Contains AI Project Name."
                      }
                    },
                    "aiLocation": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Contains AI Location."
                      }
                    },
                    "aiKind": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Contains AI Kind."
                      }
                    },
                    "aiSkuName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Contains AI SKU Name."
                      }
                    },
                    "enableSystemAssignedIdentity": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Whether to Enable or Disable System Assigned Identity."
                      }
                    },
                    "customSubDomainName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Contains Custom Sub Domain Name."
                      }
                    },
                    "publicNetworkAccess": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Contains Public Network Access."
                      }
                    },
                    "defaultNetworkAction": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Contains Default Network Action."
                      }
                    },
                    "vnetRules": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Required. Contains VNET Rules."
                      }
                    },
                    "ipRules": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Required. Contains IP Rules."
                      }
                    },
                    "aiModelDeployments": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Required. Contains AI Model Deployments."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags to be applied to the resources."
                      }
                    }
                  },
                  "resources": [
                    {
                      "condition": "[parameters('enableSystemAssignedIdentity')]",
                      "type": "Microsoft.CognitiveServices/accounts",
                      "apiVersion": "2025-04-01-preview",
                      "name": "[parameters('aiServicesName')]",
                      "location": "[parameters('aiLocation')]",
                      "kind": "[parameters('aiKind')]",
                      "sku": {
                        "name": "[parameters('aiSkuName')]"
                      },
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "properties": {
                        "allowProjectManagement": true,
                        "customSubDomainName": "[parameters('customSubDomainName')]",
                        "networkAcls": {
                          "defaultAction": "[parameters('defaultNetworkAction')]",
                          "virtualNetworkRules": "[parameters('vnetRules')]",
                          "ipRules": "[parameters('ipRules')]"
                        },
                        "publicNetworkAccess": "[parameters('publicNetworkAccess')]"
                      },
                      "tags": "[parameters('tags')]"
                    },
                    {
                      "copy": {
                        "name": "aiServicesDeployments",
                        "count": "[length(parameters('aiModelDeployments'))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "condition": "[not(empty(parameters('aiModelDeployments')))]",
                      "type": "Microsoft.CognitiveServices/accounts/deployments",
                      "apiVersion": "2025-04-01-preview",
                      "name": "[format('{0}/{1}', parameters('aiServicesName'), parameters('aiModelDeployments')[copyIndex()].name)]",
                      "properties": {
                        "model": {
                          "format": "OpenAI",
                          "name": "[parameters('aiModelDeployments')[copyIndex()].model]"
                        },
                        "raiPolicyName": "[parameters('aiModelDeployments')[copyIndex()].raiPolicyName]"
                      },
                      "sku": {
                        "name": "[parameters('aiModelDeployments')[copyIndex()].sku.name]",
                        "capacity": "[parameters('aiModelDeployments')[copyIndex()].sku.capacity]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName'))]"
                      ]
                    },
                    {
                      "condition": "[and(not(empty(parameters('aiProjectName'))), parameters('enableSystemAssignedIdentity'))]",
                      "type": "Microsoft.CognitiveServices/accounts/projects",
                      "apiVersion": "2025-04-01-preview",
                      "name": "[format('{0}/{1}', parameters('aiServicesName'), parameters('aiProjectName'))]",
                      "location": "[parameters('aiLocation')]",
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "properties": {},
                      "tags": "[parameters('tags')]",
                      "dependsOn": [
                        "[resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName'))]"
                      ]
                    },
                    {
                      "condition": "[parameters('enableSystemAssignedIdentity')]",
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('aiServicesName'))]",
                      "name": "[parameters('roleAssignmentName')]",
                      "properties": {
                        "roleDefinitionId": "[parameters('roleDefinitionId')]",
                        "principalId": "[parameters('principalId')]",
                        "principalType": "ServicePrincipal"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName'))]"
                      ]
                    },
                    {
                      "condition": "[not(parameters('enableSystemAssignedIdentity'))]",
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('aiServicesName'))]",
                      "name": "[parameters('roleAssignmentName')]",
                      "properties": {
                        "roleDefinitionId": "[parameters('roleDefinitionId')]",
                        "principalId": "[parameters('principalId')]",
                        "principalType": "ServicePrincipal"
                      }
                    }
                  ],
                  "outputs": {
                    "aiServicesPrincipalId": {
                      "type": "string",
                      "value": "[if(parameters('enableSystemAssignedIdentity'), reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), '2025-04-01-preview', 'full').identity.principalId, reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), '2025-04-01-preview', 'full').identity.principalId)]"
                    },
                    "aiProjectPrincipalId": {
                      "type": "string",
                      "value": "[if(not(empty(parameters('aiProjectName'))), if(parameters('enableSystemAssignedIdentity'), reference(resourceId('Microsoft.CognitiveServices/accounts/projects', parameters('aiServicesName'), parameters('aiProjectName')), '2025-04-01-preview', 'full').identity.principalId, reference(resourceId('Microsoft.CognitiveServices/accounts/projects', parameters('aiServicesName'), parameters('aiProjectName')), '2025-04-01-preview', 'full').identity.principalId), '')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('{0}-app-module', parameters('name')))]"
              ]
            }
          ],
          "outputs": {
            "appUrl": {
              "type": "string",
              "metadata": {
                "description": "Contains App URL."
              },
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-app-module', parameters('name'))), '2022-09-01').outputs.appUrl.value]"
            },
            "reactAppLayoutConfig": {
              "type": "string",
              "metadata": {
                "description": "Contains React App Layout Config."
              },
              "value": "[variables('reactAppLayoutConfig')]"
            },
            "appInsightInstrumentationKey": {
              "type": "string",
              "metadata": {
                "description": "Contains AppInsight Instrumentation Key."
              },
              "value": "[reference(parameters('applicationInsightsId'), '2015-05-01').InstrumentationKey]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_cosmos_db')]",
        "[resourceId('Microsoft.Resources/deployments', 'deploy_app_service_plan')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_keyvault')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_sql_db')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy_frontend_docker",
      "resourceGroup": "[resourceGroup().name]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('app-{0}', variables('solutionSuffix'))]"
          },
          "solutionLocation": {
            "value": "[variables('solutionLocation')]"
          },
          "imageTag": {
            "value": "[parameters('imageTag')]"
          },
          "acrName": {
            "value": "[variables('acrName')]"
          },
          "appServicePlanId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'deploy_app_service_plan'), '2022-09-01').outputs.name.value]"
          },
          "applicationInsightsId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.applicationInsightsId.value]"
          },
          "appSettings": {
            "value": {
              "APP_API_BASE_URL": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_backend_docker'), '2022-09-01').outputs.appUrl.value]"
            }
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "6862492752032861212"
            }
          },
          "parameters": {
            "imageTag": {
              "type": "string",
              "metadata": {
                "description": "Required. Contains the Image Tag."
              }
            },
            "acrName": {
              "type": "string",
              "metadata": {
                "description": "Required. Contains ACR Name."
              }
            },
            "applicationInsightsId": {
              "type": "string",
              "metadata": {
                "description": "Required. Contains Application Insights ID."
              }
            },
            "solutionLocation": {
              "type": "string",
              "metadata": {
                "description": "Required. Specifies the location for resources."
              }
            },
            "appSettings": {
              "type": "secureObject",
              "defaultValue": {},
              "metadata": {
                "description": "Required. Contains App Settings."
              }
            },
            "appServicePlanId": {
              "type": "string",
              "metadata": {
                "description": "Required. Contains App Service Plan ID."
              }
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the app service resource within the current resource group scope."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags to be applied to the resources."
              }
            }
          },
          "variables": {
            "imageName": "[format('DOCKER|{0}.azurecr.io/km-app:{1}', parameters('acrName'), parameters('imageTag'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-app-module', parameters('name'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "solutionLocation": {
                    "value": "[parameters('solutionLocation')]"
                  },
                  "solutionName": {
                    "value": "[parameters('name')]"
                  },
                  "appServicePlanId": {
                    "value": "[parameters('appServicePlanId')]"
                  },
                  "appImageName": {
                    "value": "[variables('imageName')]"
                  },
                  "appSettings": {
                    "value": "[union(parameters('appSettings'), createObject('APPINSIGHTS_INSTRUMENTATIONKEY', reference(parameters('applicationInsightsId'), '2015-05-01').InstrumentationKey))]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "17413180076880991152"
                    }
                  },
                  "parameters": {
                    "solutionName": {
                      "type": "string",
                      "minLength": 3,
                      "maxLength": 16,
                      "metadata": {
                        "description": "Required. Contains Solution Name."
                      }
                    },
                    "solutionLocation": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the location for resources."
                      }
                    },
                    "appSettings": {
                      "type": "secureObject",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Required. Contains App Settings."
                      }
                    },
                    "appServicePlanId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Contains App Service Plan ID."
                      }
                    },
                    "appImageName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Contains App Image Name."
                      }
                    },
                    "userassignedIdentityId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Contains User Assigned Identity ID."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags to be applied to the resources."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Web/sites/basicPublishingCredentialsPolicies",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('solutionName'), 'ftp')]",
                      "properties": {
                        "allow": false
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', parameters('solutionName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Web/sites/basicPublishingCredentialsPolicies",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('solutionName'), 'scm')]",
                      "properties": {
                        "allow": false
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', parameters('solutionName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Web/sites",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('solutionName')]",
                      "location": "[parameters('solutionLocation')]",
                      "tags": "[parameters('tags')]",
                      "identity": "[if(equals(parameters('userassignedIdentityId'), ''), createObject('type', 'SystemAssigned'), createObject('type', 'SystemAssigned, UserAssigned', 'userAssignedIdentities', createObject(format('{0}', parameters('userassignedIdentityId')), createObject())))]",
                      "properties": {
                        "serverFarmId": "[parameters('appServicePlanId')]",
                        "siteConfig": {
                          "alwaysOn": true,
                          "ftpsState": "Disabled",
                          "linuxFxVersion": "[parameters('appImageName')]"
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Web/sites/config",
                      "apiVersion": "2022-03-01",
                      "name": "[format('{0}/{1}', parameters('solutionName'), 'logs')]",
                      "properties": {
                        "applicationLogs": {
                          "fileSystem": {
                            "level": "Verbose"
                          }
                        },
                        "detailedErrorMessages": {
                          "enabled": true
                        },
                        "failedRequestsTracing": {
                          "enabled": true
                        },
                        "httpLogs": {
                          "fileSystem": {
                            "enabled": true,
                            "retentionInDays": 1,
                            "retentionInMb": 35
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', parameters('solutionName'))]",
                        "[resourceId('Microsoft.Resources/deployments', format('{0}-appSettings', parameters('solutionName')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-appSettings', parameters('solutionName'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('solutionName')]"
                          },
                          "appSettings": {
                            "value": "[parameters('appSettings')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.37.4.10188",
                              "templateHash": "17012486924716292048"
                            },
                            "description": "Updates app settings for an Azure App Service."
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the app service resource within the current resource group scope"
                              }
                            },
                            "appSettings": {
                              "type": "secureObject",
                              "metadata": {
                                "description": "Required. The app settings to be applied to the app service"
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Web/sites/config",
                              "apiVersion": "2022-03-01",
                              "name": "[format('{0}/{1}', parameters('name'), 'appsettings')]",
                              "properties": "[parameters('appSettings')]"
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', parameters('solutionName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "identityPrincipalId": {
                      "type": "string",
                      "metadata": {
                        "description": "Contains Identity Principle ID."
                      },
                      "value": "[reference(resourceId('Microsoft.Web/sites', parameters('solutionName')), '2020-06-01', 'full').identity.principalId]"
                    },
                    "appUrl": {
                      "type": "string",
                      "metadata": {
                        "description": "Contains App URL."
                      },
                      "value": "[format('https://{0}.azurewebsites.net', parameters('solutionName'))]"
                    }
                  }
                }
              }
            }
          ],
          "outputs": {
            "appUrl": {
              "type": "string",
              "metadata": {
                "description": "Contains App URL."
              },
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-app-module', parameters('name'))), '2022-09-01').outputs.appUrl.value]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_backend_docker')]",
        "[resourceId('Microsoft.Resources/deployments', 'deploy_app_service_plan')]"
      ]
    }
  ],
  "outputs": {
    "SOLUTION_NAME": {
      "type": "string",
      "metadata": {
        "description": "Contains Solution Name."
      },
      "value": "[variables('solutionSuffix')]"
    },
    "RESOURCE_GROUP_NAME": {
      "type": "string",
      "metadata": {
        "description": "Contains Resource Group Name."
      },
      "value": "[resourceGroup().name]"
    },
    "RESOURCE_GROUP_LOCATION": {
      "type": "string",
      "metadata": {
        "description": "Contains Resource Group Location."
      },
      "value": "[variables('solutionLocation')]"
    },
    "AZURE_CONTENT_UNDERSTANDING_LOCATION": {
      "type": "string",
      "metadata": {
        "description": "Contains Azure Content Understanding Location."
      },
      "value": "[parameters('contentUnderstandingLocation')]"
    },
    "AZURE_SECONDARY_LOCATION": {
      "type": "string",
      "metadata": {
        "description": "Contains Azure Secondary Location."
      },
      "value": "[parameters('secondaryLocation')]"
    },
    "APPINSIGHTS_INSTRUMENTATIONKEY": {
      "type": "string",
      "metadata": {
        "description": "Contains Application Insights Instrumentation Key."
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_backend_docker'), '2022-09-01').outputs.appInsightInstrumentationKey.value]"
    },
    "AZURE_AI_PROJECT_CONN_STRING": {
      "type": "string",
      "metadata": {
        "description": "Contains AI Project Connection String."
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.projectEndpoint.value]"
    },
    "AZURE_AI_AGENT_API_VERSION": {
      "type": "string",
      "metadata": {
        "description": "Contains Azure AI Agent API Version."
      },
      "value": "[parameters('azureAiAgentApiVersion')]"
    },
    "AZURE_AI_FOUNDRY_NAME": {
      "type": "string",
      "metadata": {
        "description": "Contains Azure AI Foundry service name."
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.aiServicesName.value]"
    },
    "AZURE_AI_PROJECT_NAME": {
      "type": "string",
      "metadata": {
        "description": "Contains Azure AI Project name."
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.aiProjectName.value]"
    },
    "AZURE_AI_SEARCH_NAME": {
      "type": "string",
      "metadata": {
        "description": "Contains Azure AI Search service name."
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.aiSearchName.value]"
    },
    "AZURE_AI_SEARCH_ENDPOINT": {
      "type": "string",
      "metadata": {
        "description": "Contains Azure AI Search endpoint URL."
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.aiSearchTarget.value]"
    },
    "AZURE_AI_SEARCH_INDEX": {
      "type": "string",
      "metadata": {
        "description": "Contains Azure AI Search index name."
      },
      "value": "call_transcripts_index"
    },
    "AZURE_AI_SEARCH_CONNECTION_NAME": {
      "type": "string",
      "metadata": {
        "description": "Contains Azure AI Search connection name."
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.aiSearchConnectionName.value]"
    },
    "AZURE_COSMOSDB_ACCOUNT": {
      "type": "string",
      "metadata": {
        "description": "Contains Azure Cosmos DB account name."
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_cosmos_db'), '2022-09-01').outputs.cosmosAccountName.value]"
    },
    "AZURE_COSMOSDB_CONVERSATIONS_CONTAINER": {
      "type": "string",
      "metadata": {
        "description": "Contains Azure Cosmos DB conversations container name."
      },
      "value": "conversations"
    },
    "AZURE_COSMOSDB_DATABASE": {
      "type": "string",
      "metadata": {
        "description": "Contains Azure Cosmos DB database name."
      },
      "value": "db_conversation_history"
    },
    "AZURE_COSMOSDB_ENABLE_FEEDBACK": {
      "type": "string",
      "metadata": {
        "description": "Contains Azure Cosmos DB feedback enablement setting."
      },
      "value": "True"
    },
    "AZURE_OPENAI_DEPLOYMENT_MODEL": {
      "type": "string",
      "metadata": {
        "description": "Contains Azure OpenAI deployment model name."
      },
      "value": "[parameters('gptModelName')]"
    },
    "AZURE_OPENAI_DEPLOYMENT_MODEL_CAPACITY": {
      "type": "int",
      "metadata": {
        "description": "Contains Azure OpenAI deployment model capacity."
      },
      "value": "[parameters('gptDeploymentCapacity')]"
    },
    "AZURE_OPENAI_ENDPOINT": {
      "type": "string",
      "metadata": {
        "description": "Contains Azure OpenAI endpoint URL."
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.aiServicesTarget.value]"
    },
    "AZURE_OPENAI_MODEL_DEPLOYMENT_TYPE": {
      "type": "string",
      "metadata": {
        "description": "Contains Azure OpenAI model deployment type."
      },
      "value": "[parameters('deploymentType')]"
    },
    "AZURE_OPENAI_EMBEDDING_MODEL": {
      "type": "string",
      "metadata": {
        "description": "Contains Azure OpenAI embedding model name."
      },
      "value": "[parameters('embeddingModel')]"
    },
    "AZURE_OPENAI_EMBEDDING_MODEL_CAPACITY": {
      "type": "int",
      "metadata": {
        "description": "Contains Azure OpenAI embedding model capacity."
      },
      "value": "[parameters('embeddingDeploymentCapacity')]"
    },
    "AZURE_OPENAI_API_VERSION": {
      "type": "string",
      "metadata": {
        "description": "Contains Azure OpenAI API version."
      },
      "value": "[parameters('azureOpenAIApiVersion')]"
    },
    "AZURE_OPENAI_RESOURCE": {
      "type": "string",
      "metadata": {
        "description": "Contains Azure OpenAI resource name."
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.aiServicesName.value]"
    },
    "REACT_APP_LAYOUT_CONFIG": {
      "type": "string",
      "metadata": {
        "description": "Contains React app layout configuration."
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_backend_docker'), '2022-09-01').outputs.reactAppLayoutConfig.value]"
    },
    "SQLDB_DATABASE": {
      "type": "string",
      "metadata": {
        "description": "Contains SQL database name."
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_sql_db'), '2022-09-01').outputs.sqlDbName.value]"
    },
    "SQLDB_SERVER": {
      "type": "string",
      "metadata": {
        "description": "Contains SQL server name."
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_sql_db'), '2022-09-01').outputs.sqlServerName.value]"
    },
    "SQLDB_USER_MID": {
      "type": "string",
      "metadata": {
        "description": "Contains SQL database user managed identity client ID."
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity'), '2022-09-01').outputs.managedIdentityBackendAppOutput.value.clientId]"
    },
    "USE_AI_PROJECT_CLIENT": {
      "type": "string",
      "metadata": {
        "description": "Contains AI project client usage setting."
      },
      "value": "False"
    },
    "USE_CHAT_HISTORY_ENABLED": {
      "type": "string",
      "metadata": {
        "description": "Contains chat history enablement setting."
      },
      "value": "True"
    },
    "DISPLAY_CHART_DEFAULT": {
      "type": "string",
      "metadata": {
        "description": "Contains default chart display setting."
      },
      "value": "False"
    },
    "AZURE_AI_AGENT_ENDPOINT": {
      "type": "string",
      "metadata": {
        "description": "Contains Azure AI Agent endpoint URL."
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.projectEndpoint.value]"
    },
    "AZURE_AI_AGENT_MODEL_DEPLOYMENT_NAME": {
      "type": "string",
      "metadata": {
        "description": "Contains Azure AI Agent model deployment name."
      },
      "value": "[parameters('gptModelName')]"
    },
    "ACR_NAME": {
      "type": "string",
      "metadata": {
        "description": "Contains Azure Container Registry name."
      },
      "value": "[variables('acrName')]"
    },
    "AZURE_ENV_IMAGETAG": {
      "type": "string",
      "metadata": {
        "description": "Contains Azure environment image tag."
      },
      "value": "[parameters('imageTag')]"
    },
    "AZURE_EXISTING_AI_PROJECT_RESOURCE_ID": {
      "type": "string",
      "metadata": {
        "description": "Contains existing AI project resource ID."
      },
      "value": "[parameters('azureExistingAIProjectResourceId')]"
    },
    "APPLICATIONINSIGHTS_CONNECTION_STRING": {
      "type": "string",
      "metadata": {
        "description": "Contains Application Insights connection string."
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.applicationInsightsConnectionString.value]"
    },
    "API_APP_URL": {
      "type": "string",
      "metadata": {
        "description": "Contains API application URL."
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_backend_docker'), '2022-09-01').outputs.appUrl.value]"
    },
    "WEB_APP_URL": {
      "type": "string",
      "metadata": {
        "description": "Contains web application URL."
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_frontend_docker'), '2022-09-01').outputs.appUrl.value]"
    }
  }
}
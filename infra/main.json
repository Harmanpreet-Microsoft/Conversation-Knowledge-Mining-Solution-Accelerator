{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.36.1.42791",
      "templateHash": "12797542072455634513"
    }
  },
  "parameters": {
    "environmentName": {
      "type": "string",
      "minLength": 3,
      "maxLength": 20,
      "metadata": {
        "description": "A unique prefix for all resources in this deployment. This should be 3-20 characters long:"
      }
    },
    "existingLogAnalyticsWorkspaceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional: Existing Log Analytics Workspace Resource ID"
      }
    },
    "azureExistingAIProjectResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Use this parameter to use an existing AI project resource ID"
      }
    },
    "contentUnderstandingLocation": {
      "type": "string",
      "allowedValues": [
        "swedencentral",
        "australiaeast"
      ],
      "metadata": {
        "azd": {
          "type": "location"
        },
        "description": "Location for the Content Understanding service deployment:"
      },
      "minLength": 1
    },
    "secondaryLocation": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Secondary location for databases creation(example:eastus2):"
      }
    },
    "deploymentType": {
      "type": "string",
      "defaultValue": "GlobalStandard",
      "allowedValues": [
        "Standard",
        "GlobalStandard"
      ],
      "minLength": 1,
      "metadata": {
        "description": "GPT model deployment type:"
      }
    },
    "gptModelName": {
      "type": "string",
      "defaultValue": "gpt-4o-mini",
      "metadata": {
        "description": "Name of the GPT model to deploy:"
      }
    },
    "gptModelVersion": {
      "type": "string",
      "defaultValue": "2024-07-18",
      "metadata": {
        "description": "Version of the GPT model to deploy:"
      }
    },
    "azureOpenAIApiVersion": {
      "type": "string",
      "defaultValue": "2025-01-01-preview"
    },
    "gptDeploymentCapacity": {
      "type": "int",
      "defaultValue": 30,
      "minValue": 10,
      "metadata": {
        "description": "Capacity of the GPT deployment:"
      }
    },
    "embeddingModel": {
      "type": "string",
      "defaultValue": "text-embedding-ada-002",
      "allowedValues": [
        "text-embedding-ada-002"
      ],
      "minLength": 1,
      "metadata": {
        "description": "Name of the Text Embedding model to deploy:"
      }
    },
    "embeddingDeploymentCapacity": {
      "type": "int",
      "defaultValue": 80,
      "minValue": 10,
      "metadata": {
        "description": "Capacity of the Embedding Model deployment"
      }
    },
    "imageTag": {
      "type": "string",
      "defaultValue": "latest"
    },
    "AZURE_LOCATION": {
      "type": "string",
      "defaultValue": ""
    },
    "useLocalBuild": {
      "type": "string",
      "defaultValue": "false",
      "metadata": {
        "description": "Set this flag to true only if you are deploying from Local"
      }
    }
  },
  "variables": {
    "$fxv#0": {
      "ai": {
        "aiSearch": "srch-",
        "aiServices": "aisa-",
        "aiVideoIndexer": "avi-",
        "machineLearningWorkspace": "mlw-",
        "openAIService": "oai-",
        "botService": "bot-",
        "computerVision": "cv-",
        "contentModerator": "cm-",
        "contentSafety": "cs-",
        "customVisionPrediction": "cstv-",
        "customVisionTraining": "cstvt-",
        "documentIntelligence": "di-",
        "faceApi": "face-",
        "healthInsights": "hi-",
        "immersiveReader": "ir-",
        "languageService": "lang-",
        "speechService": "spch-",
        "translator": "trsl-",
        "aiHub": "aih-",
        "aiHubProject": "aihp-"
      },
      "analytics": {
        "analysisServicesServer": "as",
        "databricksWorkspace": "dbw-",
        "dataExplorerCluster": "dec",
        "dataExplorerClusterDatabase": "dedb",
        "dataFactory": "adf-",
        "digitalTwin": "dt-",
        "streamAnalytics": "asa-",
        "synapseAnalyticsPrivateLinkHub": "synplh-",
        "synapseAnalyticsSQLDedicatedPool": "syndp",
        "synapseAnalyticsSparkPool": "synsp",
        "synapseAnalyticsWorkspaces": "synw",
        "dataLakeStoreAccount": "dls",
        "dataLakeAnalyticsAccount": "dla",
        "eventHubsNamespace": "evhns-",
        "eventHub": "evh-",
        "eventGridDomain": "evgd-",
        "eventGridSubscriptions": "evgs-",
        "eventGridTopic": "evgt-",
        "eventGridSystemTopic": "egst-",
        "hdInsightHadoopCluster": "hadoop-",
        "hdInsightHBaseCluster": "hbase-",
        "hdInsightKafkaCluster": "kafka-",
        "hdInsightSparkCluster": "spark-",
        "hdInsightStormCluster": "storm-",
        "hdInsightMLServicesCluster": "mls-",
        "iotHub": "iot-",
        "provisioningServices": "provs-",
        "provisioningServicesCertificate": "pcert-",
        "powerBIEmbedded": "pbi-",
        "timeSeriesInsightsEnvironment": "tsi-"
      },
      "compute": {
        "appServiceEnvironment": "ase-",
        "appServicePlan": "asp-",
        "loadTesting": "lt-",
        "availabilitySet": "avail-",
        "arcEnabledServer": "arcs-",
        "arcEnabledKubernetesCluster": "arck",
        "batchAccounts": "ba-",
        "cloudService": "cld-",
        "communicationServices": "acs-",
        "diskEncryptionSet": "des",
        "functionApp": "func-",
        "gallery": "gal",
        "hostingEnvironment": "host-",
        "imageTemplate": "it-",
        "managedDiskOS": "osdisk",
        "managedDiskData": "disk",
        "notificationHubs": "ntf-",
        "notificationHubsNamespace": "ntfns-",
        "proximityPlacementGroup": "ppg-",
        "restorePointCollection": "rpc-",
        "snapshot": "snap-",
        "staticWebApp": "stapp-",
        "virtualMachine": "vm",
        "virtualMachineScaleSet": "vmss-",
        "virtualMachineMaintenanceConfiguration": "mc-",
        "virtualMachineStorageAccount": "stvm",
        "webApp": "app-"
      },
      "containers": {
        "aksCluster": "aks-",
        "aksSystemNodePool": "npsystem-",
        "aksUserNodePool": "np-",
        "containerApp": "ca-",
        "containerAppsEnvironment": "cae-",
        "containerRegistry": "cr",
        "containerInstance": "ci",
        "serviceFabricCluster": "sf-",
        "serviceFabricManagedCluster": "sfmc-"
      },
      "databases": {
        "cosmosDBDatabase": "cosmos-",
        "cosmosDBApacheCassandra": "coscas-",
        "cosmosDBMongoDB": "cosmon-",
        "cosmosDBNoSQL": "cosno-",
        "cosmosDBTable": "costab-",
        "cosmosDBGremlin": "cosgrm-",
        "cosmosDBPostgreSQL": "cospos-",
        "cacheForRedis": "redis-",
        "sqlDatabaseServer": "sql-",
        "sqlDatabase": "sqldb-",
        "sqlElasticJobAgent": "sqlja-",
        "sqlElasticPool": "sqlep-",
        "mariaDBServer": "maria-",
        "mariaDBDatabase": "mariadb-",
        "mySQLDatabase": "mysql-",
        "postgreSQLDatabase": "psql-",
        "sqlServerStretchDatabase": "sqlstrdb-",
        "sqlManagedInstance": "sqlmi-"
      },
      "developerTools": {
        "appConfigurationStore": "appcs-",
        "mapsAccount": "map-",
        "signalR": "sigr",
        "webPubSub": "wps-"
      },
      "devOps": {
        "managedGrafana": "amg-"
      },
      "integration": {
        "apiManagementService": "apim-",
        "integrationAccount": "ia-",
        "logicApp": "logic-",
        "serviceBusNamespace": "sbns-",
        "serviceBusQueue": "sbq-",
        "serviceBusTopic": "sbt-",
        "serviceBusTopicSubscription": "sbts-"
      },
      "managementGovernance": {
        "automationAccount": "aa-",
        "applicationInsights": "appi-",
        "monitorActionGroup": "ag-",
        "monitorDataCollectionRules": "dcr-",
        "monitorAlertProcessingRule": "apr-",
        "blueprint": "bp-",
        "blueprintAssignment": "bpa-",
        "dataCollectionEndpoint": "dce-",
        "logAnalyticsWorkspace": "log-",
        "logAnalyticsQueryPacks": "pack-",
        "managementGroup": "mg-",
        "purviewInstance": "pview-",
        "resourceGroup": "rg-",
        "templateSpecsName": "ts-"
      },
      "migration": {
        "migrateProject": "migr-",
        "databaseMigrationService": "dms-",
        "recoveryServicesVault": "rsv-"
      },
      "networking": {
        "applicationGateway": "agw-",
        "applicationSecurityGroup": "asg-",
        "cdnProfile": "cdnp-",
        "cdnEndpoint": "cdne-",
        "connections": "con-",
        "dnsForwardingRuleset": "dnsfrs-",
        "dnsPrivateResolver": "dnspr-",
        "dnsPrivateResolverInboundEndpoint": "in-",
        "dnsPrivateResolverOutboundEndpoint": "out-",
        "firewall": "afw-",
        "firewallPolicy": "afwp-",
        "expressRouteCircuit": "erc-",
        "expressRouteGateway": "ergw-",
        "frontDoorProfile": "afd-",
        "frontDoorEndpoint": "fde-",
        "frontDoorFirewallPolicy": "fdfp-",
        "ipGroups": "ipg-",
        "loadBalancerInternal": "lbi-",
        "loadBalancerExternal": "lbe-",
        "loadBalancerRule": "rule-",
        "localNetworkGateway": "lgw-",
        "natGateway": "ng-",
        "networkInterface": "nic-",
        "networkSecurityGroup": "nsg-",
        "networkSecurityGroupSecurityRules": "nsgsr-",
        "networkWatcher": "nw-",
        "privateLink": "pl-",
        "privateEndpoint": "pep-",
        "publicIPAddress": "pip-",
        "publicIPAddressPrefix": "ippre-",
        "routeFilter": "rf-",
        "routeServer": "rtserv-",
        "routeTable": "rt-",
        "serviceEndpointPolicy": "se-",
        "trafficManagerProfile": "traf-",
        "userDefinedRoute": "udr-",
        "virtualNetwork": "vnet-",
        "virtualNetworkGateway": "vgw-",
        "virtualNetworkManager": "vnm-",
        "virtualNetworkPeering": "peer-",
        "virtualNetworkSubnet": "snet-",
        "virtualWAN": "vwan-",
        "virtualWANHub": "vhub-"
      },
      "security": {
        "bastion": "bas-",
        "keyVault": "kv-",
        "keyVaultManagedHSM": "kvmhsm-",
        "managedIdentity": "id-",
        "sshKey": "sshkey-",
        "vpnGateway": "vpng-",
        "vpnConnection": "vcn-",
        "vpnSite": "vst-",
        "webApplicationFirewallPolicy": "waf",
        "webApplicationFirewallPolicyRuleGroup": "wafrg"
      },
      "storage": {
        "storSimple": "ssimp",
        "backupVault": "bvault-",
        "backupVaultPolicy": "bkpol-",
        "fileShare": "share-",
        "storageAccount": "st",
        "storageSyncService": "sss-"
      },
      "virtualDesktop": {
        "labServicesPlan": "lp-",
        "virtualDesktopHostPool": "vdpool-",
        "virtualDesktopApplicationGroup": "vdag-",
        "virtualDesktopWorkspace": "vdws-",
        "virtualDesktopScalingPlan": "vdscaling-"
      }
    },
    "abbrs": "[variables('$fxv#0')]",
    "solutionLocation": "[if(empty(parameters('AZURE_LOCATION')), resourceGroup().location, parameters('AZURE_LOCATION'))]",
    "useLocalBuildLower": "[toLower(parameters('useLocalBuild'))]",
    "uniqueId": "[toLower(uniqueString(subscription().id, parameters('environmentName'), variables('solutionLocation')))]",
    "solutionPrefix": "[format('km{0}', padLeft(take(variables('uniqueId'), 12), 12, '0'))]",
    "containerRegistryName": "[format('{0}{1}', variables('abbrs').containers.containerRegistry, variables('solutionPrefix'))]",
    "containerRegistryNameCleaned": "[replace(variables('containerRegistryName'), '-', '')]",
    "acrName": "[if(equals(variables('useLocalBuildLower'), 'true'), variables('containerRegistryNameCleaned'), 'kmcontainerreg')]",
    "baseUrl": "https://raw.githubusercontent.com/microsoft/Conversation-Knowledge-Mining-Solution-Accelerator/main/"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy_managed_identity",
      "resourceGroup": "[resourceGroup().name]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "miName": {
            "value": "[format('{0}{1}', variables('abbrs').security.managedIdentity, variables('solutionPrefix'))]"
          },
          "solutionName": {
            "value": "[variables('solutionPrefix')]"
          },
          "solutionLocation": {
            "value": "[variables('solutionLocation')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "18216206668580483589"
            }
          },
          "parameters": {
            "solutionName": {
              "type": "string",
              "minLength": 3,
              "maxLength": 15,
              "metadata": {
                "description": "Solution Name"
              }
            },
            "solutionLocation": {
              "type": "string",
              "metadata": {
                "description": "Solution Location"
              }
            },
            "miName": {
              "type": "string",
              "metadata": {
                "description": "Name"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2023-01-31",
              "name": "[parameters('miName')]",
              "location": "[parameters('solutionLocation')]",
              "tags": {
                "app": "[parameters('solutionName')]",
                "location": "[parameters('solutionLocation')]"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(resourceGroup().id, resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('miName')), resourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635'))]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('miName')), '2023-01-31').principalId]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('miName'))]"
              ]
            },
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2023-01-31",
              "name": "[format('{0}-backend-app-mi', parameters('solutionName'))]",
              "location": "[parameters('solutionLocation')]",
              "tags": {
                "app": "[parameters('solutionName')]",
                "location": "[parameters('solutionLocation')]"
              }
            }
          ],
          "outputs": {
            "managedIdentityOutput": {
              "type": "object",
              "value": {
                "id": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('miName'))]",
                "objectId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('miName')), '2023-01-31').principalId]",
                "clientId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('miName')), '2023-01-31').clientId]",
                "name": "[parameters('miName')]"
              }
            },
            "managedIdentityBackendAppOutput": {
              "type": "object",
              "value": {
                "id": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-backend-app-mi', parameters('solutionName')))]",
                "objectId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-backend-app-mi', parameters('solutionName'))), '2023-01-31').principalId]",
                "clientId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-backend-app-mi', parameters('solutionName'))), '2023-01-31').clientId]",
                "name": "[format('{0}-backend-app-mi', parameters('solutionName'))]"
              }
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy_keyvault",
      "resourceGroup": "[resourceGroup().name]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "keyvaultName": {
            "value": "[format('{0}{1}', variables('abbrs').security.keyVault, variables('solutionPrefix'))]"
          },
          "solutionLocation": {
            "value": "[variables('solutionLocation')]"
          },
          "managedIdentityObjectId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity'), '2022-09-01').outputs.managedIdentityOutput.value.objectId]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "12477407174917893830"
            }
          },
          "parameters": {
            "solutionLocation": {
              "type": "string"
            },
            "managedIdentityObjectId": {
              "type": "string"
            },
            "keyvaultName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2022-07-01",
              "name": "[parameters('keyvaultName')]",
              "location": "[parameters('solutionLocation')]",
              "properties": {
                "createMode": "default",
                "accessPolicies": [
                  {
                    "objectId": "[parameters('managedIdentityObjectId')]",
                    "permissions": {
                      "certificates": [
                        "all"
                      ],
                      "keys": [
                        "all"
                      ],
                      "secrets": [
                        "all"
                      ],
                      "storage": [
                        "all"
                      ]
                    },
                    "tenantId": "[subscription().tenantId]"
                  }
                ],
                "enabledForDeployment": true,
                "enabledForDiskEncryption": true,
                "enabledForTemplateDeployment": true,
                "enableRbacAuthorization": true,
                "publicNetworkAccess": "enabled",
                "sku": {
                  "family": "A",
                  "name": "standard"
                },
                "softDeleteRetentionInDays": 7,
                "tenantId": "[subscription().tenantId]"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(resourceGroup().id, parameters('managedIdentityObjectId'), resourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483'))]",
              "properties": {
                "principalId": "[parameters('managedIdentityObjectId')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483')]",
                "principalType": "ServicePrincipal"
              }
            }
          ],
          "outputs": {
            "keyvaultName": {
              "type": "string",
              "value": "[parameters('keyvaultName')]"
            },
            "keyvaultId": {
              "type": "string",
              "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyvaultName'))]"
            },
            "keyvaultUri": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('keyvaultName')), '2022-07-01').vaultUri]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy_ai_foundry",
      "resourceGroup": "[resourceGroup().name]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "solutionName": {
            "value": "[variables('solutionPrefix')]"
          },
          "solutionLocation": {
            "value": "[variables('solutionLocation')]"
          },
          "keyVaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_keyvault'), '2022-09-01').outputs.keyvaultName.value]"
          },
          "cuLocation": {
            "value": "[parameters('contentUnderstandingLocation')]"
          },
          "deploymentType": {
            "value": "[parameters('deploymentType')]"
          },
          "gptModelName": {
            "value": "[parameters('gptModelName')]"
          },
          "gptModelVersion": {
            "value": "[parameters('gptModelVersion')]"
          },
          "azureOpenAIApiVersion": {
            "value": "[parameters('azureOpenAIApiVersion')]"
          },
          "gptDeploymentCapacity": {
            "value": "[parameters('gptDeploymentCapacity')]"
          },
          "embeddingModel": {
            "value": "[parameters('embeddingModel')]"
          },
          "embeddingDeploymentCapacity": {
            "value": "[parameters('embeddingDeploymentCapacity')]"
          },
          "managedIdentityObjectId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity'), '2022-09-01').outputs.managedIdentityOutput.value.objectId]"
          },
          "existingLogAnalyticsWorkspaceId": {
            "value": "[parameters('existingLogAnalyticsWorkspaceId')]"
          },
          "azureExistingAIProjectResourceId": {
            "value": "[parameters('azureExistingAIProjectResourceId')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "9148033240437849010"
            }
          },
          "parameters": {
            "solutionName": {
              "type": "string"
            },
            "solutionLocation": {
              "type": "string"
            },
            "keyVaultName": {
              "type": "string"
            },
            "cuLocation": {
              "type": "string"
            },
            "deploymentType": {
              "type": "string"
            },
            "gptModelName": {
              "type": "string"
            },
            "gptModelVersion": {
              "type": "string"
            },
            "azureOpenAIApiVersion": {
              "type": "string"
            },
            "gptDeploymentCapacity": {
              "type": "int"
            },
            "embeddingModel": {
              "type": "string"
            },
            "embeddingDeploymentCapacity": {
              "type": "int"
            },
            "managedIdentityObjectId": {
              "type": "string"
            },
            "existingLogAnalyticsWorkspaceId": {
              "type": "string",
              "defaultValue": ""
            },
            "azureExistingAIProjectResourceId": {
              "type": "string",
              "defaultValue": ""
            }
          },
          "variables": {
            "$fxv#0": {
              "ai": {
                "aiSearch": "srch-",
                "aiServices": "aisa-",
                "aiVideoIndexer": "avi-",
                "machineLearningWorkspace": "mlw-",
                "openAIService": "oai-",
                "botService": "bot-",
                "computerVision": "cv-",
                "contentModerator": "cm-",
                "contentSafety": "cs-",
                "customVisionPrediction": "cstv-",
                "customVisionTraining": "cstvt-",
                "documentIntelligence": "di-",
                "faceApi": "face-",
                "healthInsights": "hi-",
                "immersiveReader": "ir-",
                "languageService": "lang-",
                "speechService": "spch-",
                "translator": "trsl-",
                "aiHub": "aih-",
                "aiHubProject": "aihp-"
              },
              "analytics": {
                "analysisServicesServer": "as",
                "databricksWorkspace": "dbw-",
                "dataExplorerCluster": "dec",
                "dataExplorerClusterDatabase": "dedb",
                "dataFactory": "adf-",
                "digitalTwin": "dt-",
                "streamAnalytics": "asa-",
                "synapseAnalyticsPrivateLinkHub": "synplh-",
                "synapseAnalyticsSQLDedicatedPool": "syndp",
                "synapseAnalyticsSparkPool": "synsp",
                "synapseAnalyticsWorkspaces": "synw",
                "dataLakeStoreAccount": "dls",
                "dataLakeAnalyticsAccount": "dla",
                "eventHubsNamespace": "evhns-",
                "eventHub": "evh-",
                "eventGridDomain": "evgd-",
                "eventGridSubscriptions": "evgs-",
                "eventGridTopic": "evgt-",
                "eventGridSystemTopic": "egst-",
                "hdInsightHadoopCluster": "hadoop-",
                "hdInsightHBaseCluster": "hbase-",
                "hdInsightKafkaCluster": "kafka-",
                "hdInsightSparkCluster": "spark-",
                "hdInsightStormCluster": "storm-",
                "hdInsightMLServicesCluster": "mls-",
                "iotHub": "iot-",
                "provisioningServices": "provs-",
                "provisioningServicesCertificate": "pcert-",
                "powerBIEmbedded": "pbi-",
                "timeSeriesInsightsEnvironment": "tsi-"
              },
              "compute": {
                "appServiceEnvironment": "ase-",
                "appServicePlan": "asp-",
                "loadTesting": "lt-",
                "availabilitySet": "avail-",
                "arcEnabledServer": "arcs-",
                "arcEnabledKubernetesCluster": "arck",
                "batchAccounts": "ba-",
                "cloudService": "cld-",
                "communicationServices": "acs-",
                "diskEncryptionSet": "des",
                "functionApp": "func-",
                "gallery": "gal",
                "hostingEnvironment": "host-",
                "imageTemplate": "it-",
                "managedDiskOS": "osdisk",
                "managedDiskData": "disk",
                "notificationHubs": "ntf-",
                "notificationHubsNamespace": "ntfns-",
                "proximityPlacementGroup": "ppg-",
                "restorePointCollection": "rpc-",
                "snapshot": "snap-",
                "staticWebApp": "stapp-",
                "virtualMachine": "vm",
                "virtualMachineScaleSet": "vmss-",
                "virtualMachineMaintenanceConfiguration": "mc-",
                "virtualMachineStorageAccount": "stvm",
                "webApp": "app-"
              },
              "containers": {
                "aksCluster": "aks-",
                "aksSystemNodePool": "npsystem-",
                "aksUserNodePool": "np-",
                "containerApp": "ca-",
                "containerAppsEnvironment": "cae-",
                "containerRegistry": "cr",
                "containerInstance": "ci",
                "serviceFabricCluster": "sf-",
                "serviceFabricManagedCluster": "sfmc-"
              },
              "databases": {
                "cosmosDBDatabase": "cosmos-",
                "cosmosDBApacheCassandra": "coscas-",
                "cosmosDBMongoDB": "cosmon-",
                "cosmosDBNoSQL": "cosno-",
                "cosmosDBTable": "costab-",
                "cosmosDBGremlin": "cosgrm-",
                "cosmosDBPostgreSQL": "cospos-",
                "cacheForRedis": "redis-",
                "sqlDatabaseServer": "sql-",
                "sqlDatabase": "sqldb-",
                "sqlElasticJobAgent": "sqlja-",
                "sqlElasticPool": "sqlep-",
                "mariaDBServer": "maria-",
                "mariaDBDatabase": "mariadb-",
                "mySQLDatabase": "mysql-",
                "postgreSQLDatabase": "psql-",
                "sqlServerStretchDatabase": "sqlstrdb-",
                "sqlManagedInstance": "sqlmi-"
              },
              "developerTools": {
                "appConfigurationStore": "appcs-",
                "mapsAccount": "map-",
                "signalR": "sigr",
                "webPubSub": "wps-"
              },
              "devOps": {
                "managedGrafana": "amg-"
              },
              "integration": {
                "apiManagementService": "apim-",
                "integrationAccount": "ia-",
                "logicApp": "logic-",
                "serviceBusNamespace": "sbns-",
                "serviceBusQueue": "sbq-",
                "serviceBusTopic": "sbt-",
                "serviceBusTopicSubscription": "sbts-"
              },
              "managementGovernance": {
                "automationAccount": "aa-",
                "applicationInsights": "appi-",
                "monitorActionGroup": "ag-",
                "monitorDataCollectionRules": "dcr-",
                "monitorAlertProcessingRule": "apr-",
                "blueprint": "bp-",
                "blueprintAssignment": "bpa-",
                "dataCollectionEndpoint": "dce-",
                "logAnalyticsWorkspace": "log-",
                "logAnalyticsQueryPacks": "pack-",
                "managementGroup": "mg-",
                "purviewInstance": "pview-",
                "resourceGroup": "rg-",
                "templateSpecsName": "ts-"
              },
              "migration": {
                "migrateProject": "migr-",
                "databaseMigrationService": "dms-",
                "recoveryServicesVault": "rsv-"
              },
              "networking": {
                "applicationGateway": "agw-",
                "applicationSecurityGroup": "asg-",
                "cdnProfile": "cdnp-",
                "cdnEndpoint": "cdne-",
                "connections": "con-",
                "dnsForwardingRuleset": "dnsfrs-",
                "dnsPrivateResolver": "dnspr-",
                "dnsPrivateResolverInboundEndpoint": "in-",
                "dnsPrivateResolverOutboundEndpoint": "out-",
                "firewall": "afw-",
                "firewallPolicy": "afwp-",
                "expressRouteCircuit": "erc-",
                "expressRouteGateway": "ergw-",
                "frontDoorProfile": "afd-",
                "frontDoorEndpoint": "fde-",
                "frontDoorFirewallPolicy": "fdfp-",
                "ipGroups": "ipg-",
                "loadBalancerInternal": "lbi-",
                "loadBalancerExternal": "lbe-",
                "loadBalancerRule": "rule-",
                "localNetworkGateway": "lgw-",
                "natGateway": "ng-",
                "networkInterface": "nic-",
                "networkSecurityGroup": "nsg-",
                "networkSecurityGroupSecurityRules": "nsgsr-",
                "networkWatcher": "nw-",
                "privateLink": "pl-",
                "privateEndpoint": "pep-",
                "publicIPAddress": "pip-",
                "publicIPAddressPrefix": "ippre-",
                "routeFilter": "rf-",
                "routeServer": "rtserv-",
                "routeTable": "rt-",
                "serviceEndpointPolicy": "se-",
                "trafficManagerProfile": "traf-",
                "userDefinedRoute": "udr-",
                "virtualNetwork": "vnet-",
                "virtualNetworkGateway": "vgw-",
                "virtualNetworkManager": "vnm-",
                "virtualNetworkPeering": "peer-",
                "virtualNetworkSubnet": "snet-",
                "virtualWAN": "vwan-",
                "virtualWANHub": "vhub-"
              },
              "security": {
                "bastion": "bas-",
                "keyVault": "kv-",
                "keyVaultManagedHSM": "kvmhsm-",
                "managedIdentity": "id-",
                "sshKey": "sshkey-",
                "vpnGateway": "vpng-",
                "vpnConnection": "vcn-",
                "vpnSite": "vst-",
                "webApplicationFirewallPolicy": "waf",
                "webApplicationFirewallPolicyRuleGroup": "wafrg"
              },
              "storage": {
                "storSimple": "ssimp",
                "backupVault": "bvault-",
                "backupVaultPolicy": "bkpol-",
                "fileShare": "share-",
                "storageAccount": "st",
                "storageSyncService": "sss-"
              },
              "virtualDesktop": {
                "labServicesPlan": "lp-",
                "virtualDesktopHostPool": "vdpool-",
                "virtualDesktopApplicationGroup": "vdag-",
                "virtualDesktopWorkspace": "vdws-",
                "virtualDesktopScalingPlan": "vdscaling-"
              }
            },
            "abbrs": "[variables('$fxv#0')]",
            "aiServicesName": "[format('{0}{1}', variables('abbrs').ai.aiServices, parameters('solutionName'))]",
            "aiServicesName_cu": "[format('{0}{1}-cu', variables('abbrs').ai.aiServices, parameters('solutionName'))]",
            "location_cu": "[parameters('cuLocation')]",
            "workspaceName": "[format('{0}{1}', variables('abbrs').managementGovernance.logAnalyticsWorkspace, parameters('solutionName'))]",
            "applicationInsightsName": "[format('{0}{1}', variables('abbrs').managementGovernance.applicationInsights, parameters('solutionName'))]",
            "keyvaultName": "[format('{0}{1}', variables('abbrs').security.keyVault, parameters('solutionName'))]",
            "location": "[parameters('solutionLocation')]",
            "aiProjectName": "[format('{0}{1}', variables('abbrs').ai.aiHubProject, parameters('solutionName'))]",
            "aiSearchName": "[format('{0}{1}', variables('abbrs').ai.aiSearch, parameters('solutionName'))]",
            "aiModelDeployments": [
              {
                "name": "[parameters('gptModelName')]",
                "model": "[parameters('gptModelName')]",
                "sku": {
                  "name": "[parameters('deploymentType')]",
                  "capacity": "[parameters('gptDeploymentCapacity')]"
                },
                "version": "[parameters('gptModelVersion')]",
                "raiPolicyName": "Microsoft.Default"
              },
              {
                "name": "[parameters('embeddingModel')]",
                "model": "[parameters('embeddingModel')]",
                "sku": {
                  "name": "Standard",
                  "capacity": "[parameters('embeddingDeploymentCapacity')]"
                },
                "raiPolicyName": "Microsoft.Default"
              }
            ],
            "useExisting": "[not(empty(parameters('existingLogAnalyticsWorkspaceId')))]",
            "existingLawSubscription": "[if(variables('useExisting'), split(parameters('existingLogAnalyticsWorkspaceId'), '/')[2], '')]",
            "existingLawResourceGroup": "[if(variables('useExisting'), split(parameters('existingLogAnalyticsWorkspaceId'), '/')[4], '')]",
            "existingLawName": "[if(variables('useExisting'), split(parameters('existingLogAnalyticsWorkspaceId'), '/')[8], '')]",
            "existingOpenAIEndpoint": "[if(not(empty(parameters('azureExistingAIProjectResourceId'))), format('https://{0}.openai.azure.com/', split(parameters('azureExistingAIProjectResourceId'), '/')[8]), '')]",
            "existingProjEndpoint": "[if(not(empty(parameters('azureExistingAIProjectResourceId'))), format('https://{0}.services.ai.azure.com/api/projects/{1}', split(parameters('azureExistingAIProjectResourceId'), '/')[8], split(parameters('azureExistingAIProjectResourceId'), '/')[10]), '')]",
            "existingAIServicesName": "[if(not(empty(parameters('azureExistingAIProjectResourceId'))), split(parameters('azureExistingAIProjectResourceId'), '/')[8], '')]",
            "existingAIProjectName": "[if(not(empty(parameters('azureExistingAIProjectResourceId'))), split(parameters('azureExistingAIProjectResourceId'), '/')[10], '')]",
            "existingAIServiceSubscription": "[if(not(empty(parameters('azureExistingAIProjectResourceId'))), split(parameters('azureExistingAIProjectResourceId'), '/')[2], '')]",
            "existingAIServiceResourceGroup": "[if(not(empty(parameters('azureExistingAIProjectResourceId'))), split(parameters('azureExistingAIProjectResourceId'), '/')[4], '')]"
          },
          "resources": [
            {
              "condition": "[not(variables('useExisting'))]",
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2023-09-01",
              "name": "[variables('workspaceName')]",
              "location": "[variables('location')]",
              "tags": {},
              "properties": {
                "retentionInDays": 30,
                "sku": {
                  "name": "PerGB2018"
                }
              }
            },
            {
              "type": "Microsoft.Insights/components",
              "apiVersion": "2020-02-02",
              "name": "[variables('applicationInsightsName')]",
              "location": "[variables('location')]",
              "kind": "web",
              "properties": {
                "Application_Type": "web",
                "publicNetworkAccessForIngestion": "Enabled",
                "publicNetworkAccessForQuery": "Disabled",
                "WorkspaceResourceId": "[if(variables('useExisting'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('existingLawSubscription'), variables('existingLawResourceGroup')), 'Microsoft.OperationalInsights/workspaces', variables('existingLawName')), resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName')))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName'))]"
              ]
            },
            {
              "condition": "[empty(parameters('azureExistingAIProjectResourceId'))]",
              "type": "Microsoft.CognitiveServices/accounts",
              "apiVersion": "2025-04-01-preview",
              "name": "[variables('aiServicesName')]",
              "location": "[variables('location')]",
              "sku": {
                "name": "S0"
              },
              "kind": "AIServices",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "allowProjectManagement": true,
                "customSubDomainName": "[variables('aiServicesName')]",
                "networkAcls": {
                  "defaultAction": "Allow",
                  "virtualNetworkRules": [],
                  "ipRules": []
                },
                "publicNetworkAccess": "Enabled",
                "disableLocalAuth": false
              }
            },
            {
              "type": "Microsoft.CognitiveServices/accounts",
              "apiVersion": "2025-04-01-preview",
              "name": "[variables('aiServicesName_cu')]",
              "location": "[variables('location_cu')]",
              "sku": {
                "name": "S0"
              },
              "kind": "AIServices",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "allowProjectManagement": true,
                "customSubDomainName": "[variables('aiServicesName_cu')]",
                "networkAcls": {
                  "defaultAction": "Allow",
                  "virtualNetworkRules": [],
                  "ipRules": []
                },
                "publicNetworkAccess": "Enabled",
                "disableLocalAuth": false
              }
            },
            {
              "copy": {
                "name": "aiServicesDeployments",
                "count": "[length(variables('aiModelDeployments'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "condition": "[empty(parameters('azureExistingAIProjectResourceId'))]",
              "type": "Microsoft.CognitiveServices/accounts/deployments",
              "apiVersion": "2025-04-01-preview",
              "name": "[format('{0}/{1}', variables('aiServicesName'), variables('aiModelDeployments')[copyIndex()].name)]",
              "properties": {
                "model": {
                  "format": "OpenAI",
                  "name": "[variables('aiModelDeployments')[copyIndex()].model]"
                },
                "raiPolicyName": "[variables('aiModelDeployments')[copyIndex()].raiPolicyName]"
              },
              "sku": {
                "name": "[variables('aiModelDeployments')[copyIndex()].sku.name]",
                "capacity": "[variables('aiModelDeployments')[copyIndex()].sku.capacity]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', variables('aiServicesName'))]"
              ]
            },
            {
              "type": "Microsoft.Search/searchServices",
              "apiVersion": "2024-06-01-preview",
              "name": "[variables('aiSearchName')]",
              "location": "[parameters('solutionLocation')]",
              "sku": {
                "name": "basic"
              },
              "properties": {
                "replicaCount": 1,
                "partitionCount": 1,
                "hostingMode": "default",
                "publicNetworkAccess": "enabled",
                "networkRuleSet": {
                  "ipRules": []
                },
                "encryptionWithCmk": {
                  "enforcement": "Unspecified"
                },
                "disableLocalAuth": false,
                "authOptions": {
                  "apiKeyOnly": {}
                },
                "semanticSearch": "free"
              }
            },
            {
              "condition": "[empty(parameters('azureExistingAIProjectResourceId'))]",
              "type": "Microsoft.CognitiveServices/accounts/projects",
              "apiVersion": "2025-04-01-preview",
              "name": "[format('{0}/{1}', variables('aiServicesName'), variables('aiProjectName'))]",
              "location": "[parameters('solutionLocation')]",
              "kind": "AIServices",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {},
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', variables('aiServicesName'))]"
              ]
            },
            {
              "condition": "[empty(parameters('azureExistingAIProjectResourceId'))]",
              "type": "Microsoft.CognitiveServices/accounts/projects/connections",
              "apiVersion": "2025-04-01-preview",
              "name": "[format('{0}/{1}/{2}', variables('aiServicesName'), variables('aiProjectName'), format('myVectorStoreProjectConnectionName-{0}', parameters('solutionName')))]",
              "properties": {
                "category": "CognitiveSearch",
                "target": "[format('https://{0}.search.windows.net', variables('aiSearchName'))]",
                "authType": "AAD",
                "isSharedToAll": true,
                "metadata": {
                  "ApiType": "Azure",
                  "ResourceId": "[resourceId('Microsoft.Search/searchServices', variables('aiSearchName'))]",
                  "location": "[reference(resourceId('Microsoft.Search/searchServices', variables('aiSearchName')), '2024-06-01-preview', 'full').location]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts/projects', variables('aiServicesName'), variables('aiProjectName'))]",
                "[resourceId('Microsoft.Search/searchServices', variables('aiSearchName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(resourceGroup().id, parameters('managedIdentityObjectId'), resourceId('Microsoft.Authorization/roleDefinitions', '53ca6127-db72-4b80-b1b0-d745d6d5456d'))]",
              "properties": {
                "principalId": "[parameters('managedIdentityObjectId')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '53ca6127-db72-4b80-b1b0-d745d6d5456d')]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'TENANT-ID')]",
              "properties": {
                "value": "[subscription().tenantId]"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-OPENAI-INFERENCE-ENDPOINT')]",
              "properties": {
                "value": ""
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-OPENAI-INFERENCE-KEY')]",
              "properties": {
                "value": ""
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-OPENAI-DEPLOYMENT-MODEL')]",
              "properties": {
                "value": "[parameters('gptModelName')]"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-OPENAI-PREVIEW-API-VERSION')]",
              "properties": {
                "value": "[parameters('azureOpenAIApiVersion')]"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-OPENAI-ENDPOINT')]",
              "properties": {
                "value": "[if(not(empty(variables('existingOpenAIEndpoint'))), variables('existingOpenAIEndpoint'), reference(resourceId('Microsoft.CognitiveServices/accounts', variables('aiServicesName')), '2025-04-01-preview').endpoints['OpenAI Language Model Instance API'])]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', variables('aiServicesName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-AI-PROJECT-CONN-STRING')]",
              "properties": {
                "value": "[format('{0};{1};{2};{3}', variables('aiProjectName'), subscription().subscriptionId, resourceGroup().name, variables('aiProjectName'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts/projects', variables('aiServicesName'), variables('aiProjectName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-OPENAI-CU-ENDPOINT')]",
              "properties": {
                "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', variables('aiServicesName_cu')), '2025-04-01-preview').endpoints['OpenAI Language Model Instance API']]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', variables('aiServicesName_cu'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-OPENAI-CU-VERSION')]",
              "properties": {
                "value": "?api-version=2024-12-01-preview"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-SEARCH-KEY')]",
              "properties": {
                "value": "[listAdminKeys(resourceId('Microsoft.Search/searchServices', variables('aiSearchName')), '2024-06-01-preview').primaryKey]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Search/searchServices', variables('aiSearchName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-SEARCH-ENDPOINT')]",
              "properties": {
                "value": "[format('https://{0}.search.windows.net', variables('aiSearchName'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Search/searchServices', variables('aiSearchName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-SEARCH-SERVICE')]",
              "properties": {
                "value": "[variables('aiSearchName')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Search/searchServices', variables('aiSearchName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-SEARCH-INDEX')]",
              "properties": {
                "value": "transcripts_index"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'COG-SERVICES-ENDPOINT')]",
              "properties": {
                "value": "[if(not(empty(variables('existingOpenAIEndpoint'))), variables('existingOpenAIEndpoint'), reference(resourceId('Microsoft.CognitiveServices/accounts', variables('aiServicesName')), '2025-04-01-preview').endpoints['OpenAI Language Model Instance API'])]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', variables('aiServicesName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'COG-SERVICES-NAME')]",
              "properties": {
                "value": "[variables('aiServicesName')]"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-SUBSCRIPTION-ID')]",
              "properties": {
                "value": "[subscription().subscriptionId]"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-RESOURCE-GROUP')]",
              "properties": {
                "value": "[resourceGroup().name]"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-LOCATION')]",
              "properties": {
                "value": "[parameters('solutionLocation')]"
              }
            },
            {
              "condition": "[not(empty(parameters('azureExistingAIProjectResourceId')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "aiProjectSearchConnectionDeployment",
              "subscriptionId": "[variables('existingAIServiceSubscription')]",
              "resourceGroup": "[variables('existingAIServiceResourceGroup')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "existingAIServiceSubscription": {
                    "value": "[variables('existingAIServiceSubscription')]"
                  },
                  "existingAIServiceResourceGroup": {
                    "value": "[variables('existingAIServiceResourceGroup')]"
                  },
                  "existingAIProjectName": {
                    "value": "[variables('existingAIProjectName')]"
                  },
                  "aiSearchName": {
                    "value": "[variables('aiSearchName')]"
                  },
                  "aiSearchResourceId": {
                    "value": "[resourceId('Microsoft.Search/searchServices', variables('aiSearchName'))]"
                  },
                  "aiSearchLocation": {
                    "value": "[reference(resourceId('Microsoft.Search/searchServices', variables('aiSearchName')), '2024-06-01-preview', 'full').location]"
                  },
                  "solutionName": {
                    "value": "[parameters('solutionName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "11887493528242431118"
                    }
                  },
                  "parameters": {
                    "existingAIProjectName": {
                      "type": "string"
                    },
                    "existingAIServiceSubscription": {
                      "type": "string"
                    },
                    "existingAIServiceResourceGroup": {
                      "type": "string"
                    },
                    "aiSearchName": {
                      "type": "string"
                    },
                    "aiSearchResourceId": {
                      "type": "string"
                    },
                    "aiSearchLocation": {
                      "type": "string"
                    },
                    "solutionName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.CognitiveServices/accounts/projects/connections",
                      "apiVersion": "2025-04-01-preview",
                      "name": "[format('{0}/{1}/{2}', split(parameters('existingAIProjectName'), '/')[0], split(parameters('existingAIProjectName'), '/')[1], format('myVectorStoreProjectConnectionName-{0}', parameters('solutionName')))]",
                      "properties": {
                        "category": "CognitiveSearch",
                        "target": "[format('https://{0}.search.windows.net', parameters('aiSearchName'))]",
                        "authType": "AAD",
                        "isSharedToAll": true,
                        "metadata": {
                          "ApiType": "Azure",
                          "ResourceId": "[parameters('aiSearchResourceId')]",
                          "location": "[parameters('aiSearchLocation')]"
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "existingAIServiceSubscription": {
                      "type": "string",
                      "value": "[parameters('existingAIServiceSubscription')]"
                    },
                    "existingAIServiceResourceGroup": {
                      "type": "string",
                      "value": "[parameters('existingAIServiceResourceGroup')]"
                    },
                    "existingAiProjectId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.CognitiveServices/accounts/projects', split(parameters('existingAIProjectName'), '/')[0], split(parameters('existingAIProjectName'), '/')[1])]"
                    },
                    "existingAiProjectName": {
                      "type": "string",
                      "value": "[parameters('existingAIProjectName')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Search/searchServices', variables('aiSearchName'))]"
              ]
            }
          ],
          "outputs": {
            "keyvaultName": {
              "type": "string",
              "value": "[variables('keyvaultName')]"
            },
            "keyvaultId": {
              "type": "string",
              "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
            },
            "aiServicesTarget": {
              "type": "string",
              "value": "[if(not(empty(variables('existingOpenAIEndpoint'))), variables('existingOpenAIEndpoint'), reference(resourceId('Microsoft.CognitiveServices/accounts', variables('aiServicesName')), '2025-04-01-preview').endpoints['OpenAI Language Model Instance API'])]"
            },
            "aiServicesName": {
              "type": "string",
              "value": "[if(not(empty(variables('existingAIServicesName'))), variables('existingAIServicesName'), variables('aiServicesName'))]"
            },
            "aiSearchName": {
              "type": "string",
              "value": "[variables('aiSearchName')]"
            },
            "aiSearchId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Search/searchServices', variables('aiSearchName'))]"
            },
            "aiSearchTarget": {
              "type": "string",
              "value": "[format('https://{0}.search.windows.net', variables('aiSearchName'))]"
            },
            "aiSearchService": {
              "type": "string",
              "value": "[variables('aiSearchName')]"
            },
            "aiProjectName": {
              "type": "string",
              "value": "[if(not(empty(variables('existingAIProjectName'))), variables('existingAIProjectName'), variables('aiProjectName'))]"
            },
            "applicationInsightsId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))]"
            },
            "logAnalyticsWorkspaceResourceName": {
              "type": "string",
              "value": "[if(variables('useExisting'), variables('existingLawName'), variables('workspaceName'))]"
            },
            "logAnalyticsWorkspaceResourceGroup": {
              "type": "string",
              "value": "[if(variables('useExisting'), variables('existingLawResourceGroup'), resourceGroup().name)]"
            },
            "logAnalyticsWorkspaceSubscription": {
              "type": "string",
              "value": "[if(variables('useExisting'), variables('existingLawSubscription'), subscription().subscriptionId)]"
            },
            "projectEndpoint": {
              "type": "string",
              "value": "[if(not(empty(variables('existingProjEndpoint'))), variables('existingProjEndpoint'), reference(resourceId('Microsoft.CognitiveServices/accounts/projects', variables('aiServicesName'), variables('aiProjectName')), '2025-04-01-preview').endpoints['AI Foundry API'])]"
            },
            "applicationInsightsConnectionString": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('applicationInsightsName')), '2020-02-02').ConnectionString]"
            },
            "existingLogAnalyticsWorkspaceId": {
              "type": "string",
              "value": "[if(variables('useExisting'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('existingLawSubscription'), variables('existingLawResourceGroup')), 'Microsoft.OperationalInsights/workspaces', variables('existingLawName')), resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName')))]"
            },
            "existingLawSubscription": {
              "type": "string",
              "value": "[if(variables('useExisting'), variables('existingLawSubscription'), subscription().subscriptionId)]"
            },
            "existingLawResourceGroup": {
              "type": "string",
              "value": "[if(variables('useExisting'), variables('existingLawResourceGroup'), resourceGroup().name)]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_keyvault')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity')]"
      ]
    }
  ]
}